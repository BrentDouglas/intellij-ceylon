package au.com.machinecode.intellij.ceylon.lang;

/**
 * @author Brent Douglas <brent.n.douglas@gmail.com>
 */
public class CeylonTokenTypes {
    public static final CeylonTokenType EOF = new CeylonTokenType("EOF");
    public static final CeylonTokenType ABSTRACTED_TYPE = new CeylonTokenType("abstracts");
    public static final CeylonTokenType ADAPTED_TYPES = new CeylonTokenType("adapts");
    public static final CeylonTokenType ADD_ASSIGN_OP = new CeylonTokenType("Add Assign Operator +=");
    public static final CeylonTokenType AND_ASSIGN_OP = new CeylonTokenType("And Assign Operator &&=");
    public static final CeylonTokenType AND_OP = new CeylonTokenType("And Operator &&");
    public static final CeylonTokenType APPLY_OP = new CeylonTokenType("Apply Operator .=");
    public static final CeylonTokenType ARRAY = new CeylonTokenType("Array []");
    public static final CeylonTokenType ASSIGN = new CeylonTokenType("assign");
    public static final CeylonTokenType ASSIGN_OP = new CeylonTokenType("Assign Operator :=");
    public static final CeylonTokenType BREAK = new CeylonTokenType("break");
    public static final CeylonTokenType CASE_CLAUSE = new CeylonTokenType("case");
    public static final CeylonTokenType CASE_TYPES = new CeylonTokenType("of");
    public static final CeylonTokenType CATCH_CLAUSE = new CeylonTokenType("catch");
    public static final CeylonTokenType CHAR_LITERAL = new CeylonTokenType("Char Literal");
    public static final CeylonTokenType CLASS_DEFINITION = new CeylonTokenType("class");
    public static final CeylonTokenType COMMA = new CeylonTokenType("Comma ,");
    public static final CeylonTokenType COMPARE_OP = new CeylonTokenType("Compare Operator <=>");
    public static final CeylonTokenType COMPILER_ANNOTATION = new CeylonTokenType("Compiler Annotation @");
    public static final CeylonTokenType COMPLEMENT_ASSIGN_OP = new CeylonTokenType("Complement Assign Operator ~=");
    public static final CeylonTokenType COMPLEMENT_OP = new CeylonTokenType("Complement Operator ~");
    public static final CeylonTokenType CONTINUE = new CeylonTokenType("continue");
    public static final CeylonTokenType DECREMENT_OP = new CeylonTokenType("Decrement Operator --");
    public static final CeylonTokenType DEFAULT_OP = new CeylonTokenType("Default Operator ?");
    public static final CeylonTokenType DIFFERENCE_OP = new CeylonTokenType("Difference Operator -");
    public static final CeylonTokenType DIVIDE_ASSIGN_OP = new CeylonTokenType("Divide Assign Operator /=");
    public static final CeylonTokenType DIGIT = new CeylonTokenType("Digit [0-9]");
    public static final CeylonTokenType DIGITS = new CeylonTokenType("Digits [0-9]+");
    public static final CeylonTokenType ELLIPSIS = new CeylonTokenType("Ellipsis ...");
    public static final CeylonTokenType ELSE_CLAUSE = new CeylonTokenType("else");
    public static final CeylonTokenType ENTRY_OP = new CeylonTokenType("Entry Operator ->");
    public static final CeylonTokenType EQUAL_OP = new CeylonTokenType("Equal Operator ==");
    public static final CeylonTokenType EXISTS = new CeylonTokenType("exists");
    public static final CeylonTokenType EXTENDS = new CeylonTokenType("extends");
    public static final CeylonTokenType ESCAPE_SEQUENCE = new CeylonTokenType("Escape Sequence");
    public static final CeylonTokenType EXPONENT = new CeylonTokenType("Exponent [Ee][+-]?[0-9]+");
    public static final CeylonTokenType FINALLY_CLAUSE = new CeylonTokenType("finally");
    public static final CeylonTokenType FLOAT_LITERAL = new CeylonTokenType("Float Literal");
    public static final CeylonTokenType FOR_CLAUSE = new CeylonTokenType("for");
    public static final CeylonTokenType FUNCTION_MODIFIER = new CeylonTokenType("function");
    public static final CeylonTokenType FRACTIONAL_MAGNITUDE = new CeylonTokenType("Fractional Magnitude [fmnpu]");
    public static final CeylonTokenType IDENTICAL_OP = new CeylonTokenType("Identical Operator ===");
    public static final CeylonTokenType IF_CLAUSE = new CeylonTokenType("if");
    public static final CeylonTokenType IMPORT = new CeylonTokenType("import");
    public static final CeylonTokenType INCREMENT_OP = new CeylonTokenType("Increment Operator ++");
    public static final CeylonTokenType INDEX_OP = new CeylonTokenType("Index Operator [");
    public static final CeylonTokenType INTERFACE_DEFINITION = new CeylonTokenType("interface");
    public static final CeylonTokenType INTERSECTION_OP = new CeylonTokenType("Intersection Operator &");
    public static final CeylonTokenType INTERSECT_ASSIGN_OP = new CeylonTokenType("Intersect Assign Operator &=");
    public static final CeylonTokenType IN_OP = new CeylonTokenType("in");
    public static final CeylonTokenType IS_OP = new CeylonTokenType("is");
    public static final CeylonTokenType IDENTIFIER_PART = new CeylonTokenType("Identifier Part");
    public static final CeylonTokenType IDENTIFIER_START = new CeylonTokenType("Identifier Start");
    public static final CeylonTokenType LARGER_OP = new CeylonTokenType("Larger Operator >");
    public static final CeylonTokenType LARGE_AS_OP = new CeylonTokenType("Large As Operator >=");
    public static final CeylonTokenType LBRACE = new CeylonTokenType("Left Brace {");
    public static final CeylonTokenType LBRACKET = new CeylonTokenType("Left Bracket [");
    public static final CeylonTokenType LIDENTIFIER = new CeylonTokenType("Lower Case Identifier");
    public static final CeylonTokenType LINE_COMMENT = new CeylonTokenType("Line Comment [//|#!]");
    public static final CeylonTokenType LPAREN = new CeylonTokenType("Left Parenthesis (");
    public static final CeylonTokenType LETTER = new CeylonTokenType("Letter [a-zA-Z\\u00c0-\\ufffe]");
    public static final CeylonTokenType MEMBER_OP = new CeylonTokenType("Member Operator .");
    public static final CeylonTokenType MULTIPLY_ASSIGN_OP = new CeylonTokenType("Multiply Assign Operator *=");
    public static final CeylonTokenType MULTI_COMMENT = new CeylonTokenType("Multi Line Comment /* */");
    public static final CeylonTokenType MAGNITUDE = new CeylonTokenType("Magnitude [GMPTK]");
    public static final CeylonTokenType NATURAL_LITERAL = new CeylonTokenType("Natural Literal");
    public static final CeylonTokenType NONEMPTY = new CeylonTokenType("nonempty");
    public static final CeylonTokenType NOT_EQUAL_OP = new CeylonTokenType("Not Equal Operator !=");
    public static final CeylonTokenType NOT_OP = new CeylonTokenType("Not Operator !");
    public static final CeylonTokenType NON_CHARACTER_CHARS = new CeylonTokenType("Non Character Characters \\n, \\r, etc");
    public static final CeylonTokenType NON_STRING_CHARS = new CeylonTokenType("Non String Characters");
    public static final CeylonTokenType OBJECT_DEFINITION = new CeylonTokenType("object");
    public static final CeylonTokenType OR_ASSIGN_OP = new CeylonTokenType("Or Assign Operator ||=");
    public static final CeylonTokenType OR_OP = new CeylonTokenType("Or Operator ||");
    public static final CeylonTokenType OUT = new CeylonTokenType("out");
    public static final CeylonTokenType OUTER = new CeylonTokenType("outer");
    public static final CeylonTokenType POWER_OP = new CeylonTokenType("Power Operator **");
    public static final CeylonTokenType PRODUCT_OP = new CeylonTokenType("Product Operator *");
    public static final CeylonTokenType QMARK = new CeylonTokenType("Question Mark ?");
    public static final CeylonTokenType QUOTED_LITERAL = new CeylonTokenType("Quoted Literal");
    public static final CeylonTokenType QUOTED_LITERAL_PART = new CeylonTokenType("Quoted Literal Part");
    public static final CeylonTokenType QUOTIENT_OP = new CeylonTokenType("Quotient Operator /");
    public static final CeylonTokenType RANGE_OP = new CeylonTokenType("Range Operator ..");
    public static final CeylonTokenType RBRACE = new CeylonTokenType("Right Brace }");
    public static final CeylonTokenType RBRACKET = new CeylonTokenType("Right Bracket ]");
    public static final CeylonTokenType REMAINDER_ASSIGN_OP = new CeylonTokenType("Remainder Assign Operator %=");
    public static final CeylonTokenType REMAINDER_OP = new CeylonTokenType("Remainder Operator %");
    public static final CeylonTokenType RETURN = new CeylonTokenType("return");
    public static final CeylonTokenType RPAREN = new CeylonTokenType("Right Parenthesis )");
    public static final CeylonTokenType SAFE_INDEX_OP = new CeylonTokenType("Safe Index Operator ?[");
    public static final CeylonTokenType SAFE_MEMBER_OP = new CeylonTokenType("Safe Member Operator ?.");
    public static final CeylonTokenType SATISFIES = new CeylonTokenType("satisfies");
    public static final CeylonTokenType SEMICOLON = new CeylonTokenType("Semicolon ;");
    public static final CeylonTokenType SMALLER_OP = new CeylonTokenType("Smaller Operator <");
    public static final CeylonTokenType SMALL_AS_OP = new CeylonTokenType("Small As Operator <=");
    public static final CeylonTokenType SPECIFY = new CeylonTokenType("Specify =");
    public static final CeylonTokenType SPREAD_OP = new CeylonTokenType("Spread Operator [].");
    public static final CeylonTokenType STRING_LITERAL = new CeylonTokenType("String Literal");
    public static final CeylonTokenType STRING_PART = new CeylonTokenType("String Part");
    public static final CeylonTokenType SUBTRACT_ASSIGN_OP = new CeylonTokenType("Subtract Assign Operator -=");
    public static final CeylonTokenType SUM_OP = new CeylonTokenType("Sum Operator +");
    public static final CeylonTokenType SUPER = new CeylonTokenType("super");
    public static final CeylonTokenType SWITCH_CLAUSE = new CeylonTokenType("switch");
    public static final CeylonTokenType THEN_CLAUSE = new CeylonTokenType("then");
    public static final CeylonTokenType THIS = new CeylonTokenType("this");
    public static final CeylonTokenType THROW = new CeylonTokenType("throw");
    public static final CeylonTokenType TRY_CLAUSE = new CeylonTokenType("try");
    public static final CeylonTokenType TYPE_CONSTRAINT = new CeylonTokenType("given");
    public static final CeylonTokenType UIDENTIFIER = new CeylonTokenType("Upper Case Identifier");
    public static final CeylonTokenType UNION_ASSIGN_OP = new CeylonTokenType("Union Assign Operator |=");
    public static final CeylonTokenType UNION_OP = new CeylonTokenType("Union Operator |");
    public static final CeylonTokenType VALUE_MODIFIER = new CeylonTokenType("value");
    public static final CeylonTokenType VOID_MODIFIER = new CeylonTokenType("void");
    public static final CeylonTokenType WHILE_CLAUSE = new CeylonTokenType("while");
    public static final CeylonTokenType WS = new CeylonTokenType("White Space");
    public static final CeylonTokenType XOR_ASSIGN_OP = new CeylonTokenType("Xor Assign Operator ^=");
    public static final CeylonTokenType XOR_OP = new CeylonTokenType("Xor Operator ^");
}
