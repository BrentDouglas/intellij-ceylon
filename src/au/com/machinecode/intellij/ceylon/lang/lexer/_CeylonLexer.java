/* The following code was generated by JFlex 1.4.3 on 2/18/12 12:12 AM */

package au.com.machinecode.intellij.ceylon.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/18/12 12:12 AM from the specification file
 * <tt>ceylon.jflex</tt>
 */
public class _CeylonLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTI_LINE_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\10\0\1\23\1\24\1\4\1\0\1\24\1\5\22\0\1\1\1\3"+
    "\1\41\1\2\1\0\1\102\1\104\1\42\1\73\1\74\1\40\1\101"+
    "\1\71\1\16\1\13\1\6\12\12\1\111\1\72\1\110\1\100\1\103"+
    "\1\77\1\112\1\36\1\11\1\34\1\11\1\15\1\11\1\33\1\35"+
    "\1\31\3\11\1\20\1\32\1\11\1\20\1\11\1\30\1\26\1\27"+
    "\6\11\1\75\1\43\1\76\1\107\1\10\1\22\1\56\1\44\1\54"+
    "\1\64\1\14\1\45\1\62\1\66\1\46\1\61\1\17\1\55\1\47"+
    "\1\60\1\51\1\50\1\7\1\52\1\57\1\53\1\21\1\63\1\67"+
    "\1\65\1\70\1\7\1\25\1\105\1\37\1\106\53\0\1\7\12\0"+
    "\1\7\4\0\1\7\5\0\27\11\1\0\7\11\30\7\1\0\10\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\2\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\2\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\2\11\1\7"+
    "\1\11\1\7\1\11\3\7\2\11\1\7\1\11\1\7\2\11\1\7"+
    "\3\11\2\7\4\11\1\7\2\11\1\7\3\11\3\7\2\11\1\7"+
    "\2\11\1\7\1\11\1\7\1\11\1\7\2\11\1\7\1\11\2\7"+
    "\1\11\1\7\2\11\1\7\3\11\1\7\1\11\1\7\2\11\2\7"+
    "\1\0\1\11\3\7\4\0\1\11\1\0\1\7\1\11\1\0\1\7"+
    "\1\11\1\0\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\2\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\2\7\1\11\1\0\1\7"+
    "\1\11\1\7\3\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\4\7\31\0\140\7\326\0\1\11\1\0\3\11\1\0\1\11"+
    "\1\0\2\11\1\7\21\11\1\0\11\11\43\7\1\0\2\7\3\11"+
    "\3\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\5\7\1\11\1\7\1\0\1\11\1\7"+
    "\2\11\1\7\4\0\60\11\60\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\10\0"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\2\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\0\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\2\0\1\11\1\7"+
    "\6\0\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\41\0\46\11\12\0"+
    "\47\7\u0b18\0\46\11\u0c3a\0\54\7\66\0\12\7\224\0\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\7\7\4\0\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\6\0"+
    "\10\7\10\11\6\7\2\0\6\11\2\0\10\7\10\11\10\7\10\11"+
    "\6\7\2\0\6\11\2\0\10\7\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\10\7\10\11\16\7\2\0\10\7\10\0\10\7"+
    "\10\0\10\7\10\0\5\7\1\0\2\7\4\11\2\0\1\7\3\0"+
    "\3\7\1\0\2\7\4\11\4\0\4\7\2\0\2\7\4\11\4\0"+
    "\10\7\5\11\5\0\3\7\1\0\2\7\4\11\165\0\1\7\15\0"+
    "\1\7\202\0\1\11\4\0\1\11\2\0\1\7\3\11\2\7\3\11"+
    "\1\7\1\0\1\11\3\0\5\11\6\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\4\11\1\0\1\7\2\11\1\0\1\11\1\7\4\0"+
    "\1\7\3\0\1\7\2\11\5\0\1\11\4\7\ud9b6\0\7\7\14\0"+
    "\5\7\u0409\0\32\11\6\0\32\7\245\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\7\1\10\1\13\2\14\1\15"+
    "\1\2\1\16\1\17\1\20\2\2\1\7\1\15\7\7"+
    "\1\15\3\7\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\2\1\41\2\0\1\42\1\43\1\44"+
    "\1\45\1\46\1\0\1\47\1\0\1\50\1\51\1\52"+
    "\1\53\1\54\1\0\2\7\1\54\1\55\1\56\1\57"+
    "\3\0\1\60\1\61\1\0\1\62\1\63\4\7\1\64"+
    "\1\7\1\65\1\66\2\7\1\67\21\7\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\2\42"+
    "\2\44\1\0\1\47\1\51\1\111\1\7\2\54\3\7"+
    "\1\10\1\54\1\112\1\0\3\7\1\113\2\7\1\114"+
    "\2\7\1\115\22\7\1\116\1\117\1\120\1\121\1\122"+
    "\2\0\1\47\1\51\1\0\1\7\1\54\1\0\1\54"+
    "\1\123\2\7\1\10\1\54\1\0\10\7\1\124\1\125"+
    "\4\7\1\126\10\7\1\127\2\7\1\47\1\130\2\51"+
    "\1\0\1\7\1\54\1\0\1\54\2\7\1\10\1\54"+
    "\1\0\1\131\4\7\1\132\2\7\1\133\1\7\1\134"+
    "\1\135\3\7\1\136\3\7\1\137\1\140\1\141\1\130"+
    "\1\0\1\51\1\0\1\51\1\54\1\0\1\54\1\142"+
    "\1\7\1\54\1\0\2\7\1\143\1\7\1\144\1\145"+
    "\2\7\1\146\1\147\1\7\1\150\1\7\1\47\1\51"+
    "\1\0\1\51\1\54\1\151\1\0\1\7\1\152\5\7"+
    "\1\51\1\0\1\51\1\0\1\153\1\7\1\154\2\7"+
    "\1\155\2\51\1\0\1\156\1\157\1\160\11\0\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u020d\0\u0258"+
    "\0\u020d\0\u041a\0\u0465\0\226\0\u04b0\0\u04fb\0\u0546\0\u0591"+
    "\0\u05dc\0\u0627\0\u0672\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9"+
    "\0\u0834\0\u087f\0\u08ca\0\u0915\0\226\0\226\0\226\0\226"+
    "\0\u0960\0\226\0\u09ab\0\u09f6\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22"+
    "\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e\0\u0c99\0\226\0\u0ce4\0\u0d2f"+
    "\0\u0d7a\0\226\0\u0dc5\0\226\0\226\0\u0e10\0\u0e5b\0\u0ea6"+
    "\0\226\0\226\0\u0ef1\0\226\0\u0f3c\0\u0f87\0\u0fd2\0\u101d"+
    "\0\u1068\0\226\0\226\0\226\0\u10b3\0\u10fe\0\u1149\0\226"+
    "\0\226\0\u04fb\0\226\0\226\0\u1194\0\u11df\0\u122a\0\u1275"+
    "\0\u020d\0\u12c0\0\u020d\0\u130b\0\u1356\0\u13a1\0\u020d\0\u13ec"+
    "\0\u1437\0\u1482\0\u14cd\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644"+
    "\0\u168f\0\u16da\0\u1725\0\u1770\0\u17bb\0\u1806\0\u1851\0\u189c"+
    "\0\u18e7\0\226\0\u1932\0\226\0\226\0\226\0\226\0\226"+
    "\0\u197d\0\226\0\u19c8\0\226\0\226\0\u1a13\0\226\0\226"+
    "\0\226\0\226\0\u1a5e\0\226\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a"+
    "\0\226\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97"+
    "\0\u1de2\0\226\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u020d\0\u1f59"+
    "\0\u1fa4\0\u1fef\0\u203a\0\u2085\0\u020d\0\u20d0\0\u211b\0\u2166"+
    "\0\u21b1\0\u21fc\0\u2247\0\u2292\0\u22dd\0\u2328\0\u2373\0\u23be"+
    "\0\u2409\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580\0\u25cb\0\226"+
    "\0\226\0\226\0\226\0\226\0\u2616\0\u2661\0\u26ac\0\u26f7"+
    "\0\u2742\0\u278d\0\u27d8\0\u2823\0\u286e\0\u020d\0\u28b9\0\u2904"+
    "\0\u294f\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6\0\u2b11\0\u2b5c"+
    "\0\u2ba7\0\u2bf2\0\u2c3d\0\u020d\0\u020d\0\u2c88\0\u2cd3\0\u2d1e"+
    "\0\u2d69\0\u020d\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b"+
    "\0\u2f76\0\u2fc1\0\u020d\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138"+
    "\0\u3183\0\u31ce\0\u3219\0\u3264\0\u32af\0\u32fa\0\u3345\0\u3390"+
    "\0\u33db\0\u3426\0\u3471\0\u020d\0\u34bc\0\u3507\0\u3552\0\u359d"+
    "\0\u020d\0\u35e8\0\u3633\0\u020d\0\u367e\0\u020d\0\u020d\0\u36c9"+
    "\0\u3714\0\u375f\0\u020d\0\u37aa\0\u37f5\0\u3840\0\u020d\0\u020d"+
    "\0\u020d\0\u388b\0\u38d6\0\u3921\0\u396c\0\u39b7\0\u3a02\0\u3a4d"+
    "\0\u3a98\0\u020d\0\u3ae3\0\u3b2e\0\u3b79\0\u3bc4\0\u3c0f\0\u020d"+
    "\0\u3c5a\0\u020d\0\u020d\0\u3ca5\0\u3cf0\0\u020d\0\u020d\0\u3d3b"+
    "\0\u020d\0\u3d86\0\u3dd1\0\u3e1c\0\u3e67\0\u3eb2\0\u3efd\0\u020d"+
    "\0\u3f48\0\u3f93\0\u020d\0\u3fde\0\u4029\0\u4074\0\u40bf\0\u410a"+
    "\0\u4155\0\u41a0\0\u41eb\0\u4236\0\u020d\0\u4281\0\u020d\0\u42cc"+
    "\0\u4317\0\u020d\0\u4362\0\u43ad\0\u43f8\0\u020d\0\u020d\0\u020d"+
    "\0\u4443\0\u448e\0\u44d9\0\u4524\0\u456f\0\u45ba\0\u4605\0\u4650"+
    "\0\u469b\0\226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\2\4\1\7\2\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\3\1\4\1\23\1\11\1\20\3\11\1\20"+
    "\3\11\1\24\1\25\1\3\1\26\1\27\1\30\1\31"+
    "\1\32\2\21\1\33\1\34\1\35\1\36\1\10\1\37"+
    "\1\40\1\41\1\10\1\42\1\43\3\10\1\44\1\10"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\6\0\1\67\31\0\1\70\166\0\1\4"+
    "\2\0\2\4\16\0\1\4\71\0\1\71\207\0\1\72"+
    "\20\0\1\73\31\0\1\74\37\0\1\75\21\0\4\10"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\25\10"+
    "\31\0\4\11\1\0\2\11\1\0\3\11\4\0\11\11"+
    "\5\0\25\11\32\0\1\76\1\0\1\77\1\100\3\0"+
    "\2\101\1\102\5\0\1\101\3\0\1\101\11\0\1\102"+
    "\1\0\2\102\7\0\1\102\45\0\1\103\64\0\1\104"+
    "\21\0\3\10\1\105\1\0\2\10\1\106\3\10\4\0"+
    "\11\10\5\0\11\10\1\107\7\10\1\110\3\10\10\0"+
    "\1\106\20\0\3\11\1\111\1\0\2\11\1\106\3\11"+
    "\4\0\11\11\5\0\25\11\10\0\1\106\27\0\1\112"+
    "\61\0\1\113\2\0\1\114\7\0\4\115\2\0\14\115"+
    "\3\0\16\115\1\116\47\115\26\0\1\117\124\0\1\120"+
    "\37\0\1\121\12\0\42\122\1\123\50\122\22\0\1\124"+
    "\16\0\5\124\4\0\2\124\4\0\1\124\41\0\4\10"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\6\10"+
    "\1\125\16\10\31\0\4\10\1\0\2\10\1\0\2\10"+
    "\1\126\4\0\11\10\5\0\2\10\1\127\2\10\1\130"+
    "\17\10\31\0\4\10\1\0\2\10\1\0\3\10\4\0"+
    "\11\10\5\0\1\10\1\131\1\10\1\132\7\10\1\133"+
    "\1\134\10\10\31\0\4\10\1\0\2\10\1\0\2\10"+
    "\1\135\4\0\11\10\5\0\1\136\1\137\23\10\31\0"+
    "\4\10\1\0\1\140\1\10\1\0\3\10\4\0\11\10"+
    "\5\0\25\10\31\0\4\10\1\0\2\10\1\0\3\10"+
    "\4\0\11\10\5\0\6\10\1\141\13\10\1\142\2\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\5\10\1\143\3\10\1\144\1\145\12\10\31\0"+
    "\4\10\1\0\2\10\1\0\3\10\4\0\11\10\5\0"+
    "\1\146\12\10\1\147\4\10\1\150\4\10\31\0\4\10"+
    "\1\0\2\10\1\0\2\10\1\151\4\0\11\10\5\0"+
    "\12\10\1\152\10\10\1\153\1\10\31\0\4\10\1\0"+
    "\2\10\1\0\3\10\4\0\11\10\5\0\5\10\1\154"+
    "\17\10\31\0\4\10\1\0\2\10\1\0\3\10\4\0"+
    "\11\10\5\0\2\10\1\155\22\10\31\0\4\10\1\0"+
    "\2\10\1\0\3\10\4\0\11\10\5\0\5\10\1\156"+
    "\4\10\1\157\12\10\31\0\4\10\1\0\2\10\1\0"+
    "\3\10\4\0\11\10\5\0\22\10\1\160\2\10\120\0"+
    "\1\161\27\0\1\162\177\0\1\163\112\0\1\164\1\165"+
    "\111\0\1\166\112\0\1\167\112\0\1\170\3\0\1\171"+
    "\106\0\1\172\4\0\1\173\105\0\1\174\112\0\1\175"+
    "\112\0\1\176\112\0\1\177\52\0\1\200\60\0\1\201"+
    "\104\0\4\71\1\202\1\203\105\71\4\73\1\204\1\205"+
    "\105\73\12\0\1\206\110\0\1\76\1\0\1\207\1\100"+
    "\3\0\2\101\1\102\5\0\1\101\3\0\1\101\11\0"+
    "\1\102\1\0\2\102\7\0\1\102\44\0\1\210\113\0"+
    "\1\211\106\0\1\10\1\212\1\10\1\213\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\25\10\34\0\1\214"+
    "\107\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\13\10\1\215\11\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\2\10\1\216\4\10"+
    "\1\217\15\10\31\0\1\11\1\220\1\11\1\221\1\0"+
    "\2\11\1\0\3\11\4\0\11\11\5\0\25\11\44\0"+
    "\1\222\112\0\1\115\16\0\5\115\4\0\2\115\4\0"+
    "\1\115\61\0\1\223\72\0\4\10\1\0\1\224\1\10"+
    "\1\0\3\10\4\0\11\10\5\0\25\10\31\0\4\10"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\14\10"+
    "\1\225\10\10\31\0\4\10\1\0\2\10\1\0\3\10"+
    "\4\0\11\10\5\0\14\10\1\226\10\10\31\0\4\10"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\6\10"+
    "\1\227\16\10\31\0\4\10\1\0\2\10\1\0\3\10"+
    "\4\0\11\10\5\0\4\10\1\230\20\10\31\0\4\10"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\7\10"+
    "\1\231\15\10\31\0\4\10\1\0\2\10\1\0\3\10"+
    "\4\0\11\10\5\0\7\10\1\232\15\10\31\0\4\10"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\15\10"+
    "\1\233\7\10\31\0\4\10\1\0\2\10\1\0\3\10"+
    "\4\0\11\10\5\0\7\10\1\234\15\10\31\0\4\10"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\24\10"+
    "\1\235\31\0\4\10\1\0\1\236\1\10\1\0\3\10"+
    "\4\0\11\10\5\0\2\10\1\237\3\10\1\240\16\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\14\10\1\241\10\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\12\10\1\242\12\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\7\10\1\243\3\10\1\244\11\10\31\0\4\10"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\13\10"+
    "\1\245\11\10\31\0\4\10\1\0\2\10\1\0\3\10"+
    "\4\0\11\10\5\0\13\10\1\246\11\10\31\0\4\10"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\12\10"+
    "\1\247\12\10\31\0\4\10\1\0\2\10\1\0\3\10"+
    "\4\0\11\10\5\0\4\10\1\250\20\10\31\0\4\10"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\7\10"+
    "\1\251\15\10\31\0\4\10\1\0\2\10\1\0\3\10"+
    "\4\0\11\10\5\0\2\10\1\252\22\10\31\0\4\10"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\14\10"+
    "\1\253\10\10\31\0\4\10\1\0\2\10\1\0\3\10"+
    "\4\0\11\10\5\0\17\10\1\254\5\10\31\0\4\10"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\2\10"+
    "\1\255\22\10\31\0\4\10\1\0\2\10\1\0\3\10"+
    "\4\0\11\10\5\0\11\10\1\256\13\10\31\0\4\10"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\2\10"+
    "\1\257\22\10\35\0\1\260\177\0\1\261\112\0\1\262"+
    "\112\0\1\263\115\0\1\264\13\0\1\202\112\0\1\204"+
    "\120\0\1\265\110\0\1\266\1\0\1\267\1\100\3\0"+
    "\2\101\1\102\5\0\1\101\3\0\1\101\11\0\1\102"+
    "\1\0\2\102\7\0\1\102\44\0\1\270\1\0\2\271"+
    "\1\0\3\102\5\0\1\102\3\0\1\102\11\0\1\102"+
    "\1\0\2\102\7\0\1\102\41\0\3\10\1\272\1\0"+
    "\2\10\1\0\3\10\4\0\11\10\5\0\25\10\31\0"+
    "\1\10\1\212\1\10\1\273\1\0\2\10\1\0\3\10"+
    "\4\0\11\10\5\0\25\10\32\0\1\274\1\0\1\275"+
    "\107\0\4\10\1\0\1\276\1\10\1\0\3\10\4\0"+
    "\11\10\5\0\25\10\31\0\4\10\1\0\2\10\1\0"+
    "\3\10\4\0\11\10\5\0\13\10\1\277\11\10\31\0"+
    "\4\10\1\0\1\300\1\10\1\0\3\10\4\0\11\10"+
    "\5\0\25\10\31\0\3\11\1\301\1\0\2\11\1\0"+
    "\3\11\4\0\11\11\5\0\25\11\31\0\1\11\1\220"+
    "\1\11\1\302\1\0\2\11\1\0\3\11\4\0\11\11"+
    "\5\0\25\11\52\0\1\303\71\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\12\10\1\304\12\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\10\10\1\305\14\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\12\10\1\306\12\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\5\10\1\307\17\10\31\0\4\10\1\0\1\310"+
    "\1\10\1\0\3\10\4\0\11\10\5\0\25\10\31\0"+
    "\4\10\1\0\1\311\1\10\1\0\3\10\4\0\11\10"+
    "\5\0\25\10\31\0\4\10\1\0\1\312\1\10\1\0"+
    "\3\10\4\0\11\10\5\0\25\10\31\0\4\10\1\0"+
    "\2\10\1\0\2\10\1\313\4\0\11\10\5\0\25\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\14\10\1\314\10\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\13\10\1\315\11\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\5\10\1\316\17\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\7\10\1\317\15\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\13\10\1\320\11\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\10\10\1\321\14\10"+
    "\31\0\4\10\1\0\1\322\1\10\1\0\3\10\4\0"+
    "\11\10\5\0\25\10\31\0\4\10\1\0\2\10\1\0"+
    "\3\10\4\0\11\10\5\0\7\10\1\323\15\10\31\0"+
    "\4\10\1\0\2\10\1\0\3\10\4\0\11\10\5\0"+
    "\2\10\1\324\22\10\31\0\4\10\1\0\2\10\1\0"+
    "\3\10\4\0\11\10\5\0\4\10\1\325\20\10\31\0"+
    "\4\10\1\0\1\326\1\10\1\0\3\10\4\0\11\10"+
    "\5\0\25\10\31\0\4\10\1\0\2\10\1\0\3\10"+
    "\4\0\11\10\5\0\2\10\1\327\22\10\31\0\4\10"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\7\10"+
    "\1\330\15\10\31\0\4\10\1\0\1\331\1\10\1\0"+
    "\3\10\4\0\11\10\5\0\25\10\31\0\4\10\1\0"+
    "\1\332\1\10\1\0\3\10\4\0\11\10\5\0\25\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\20\10\1\333\4\10\31\0\4\10\1\0\2\10"+
    "\1\0\2\10\1\334\4\0\11\10\5\0\25\10\31\0"+
    "\4\10\1\0\2\10\1\0\3\10\4\0\11\10\5\0"+
    "\11\10\1\335\13\10\34\0\1\336\112\0\1\337\112\0"+
    "\1\267\1\100\3\0\2\101\1\102\5\0\1\101\3\0"+
    "\1\101\11\0\1\102\1\0\2\102\7\0\1\102\44\0"+
    "\1\340\1\0\2\271\1\0\3\102\5\0\1\102\3\0"+
    "\1\102\11\0\1\102\1\0\2\102\7\0\1\102\44\0"+
    "\1\341\3\0\1\342\62\0\1\342\20\0\3\10\1\343"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\25\10"+
    "\31\0\1\10\1\212\1\10\1\344\1\0\2\10\1\0"+
    "\3\10\4\0\11\10\5\0\25\10\34\0\1\345\110\0"+
    "\1\274\1\0\1\346\107\0\4\10\1\0\2\10\1\0"+
    "\3\10\4\0\11\10\5\0\7\10\1\347\15\10\31\0"+
    "\4\10\1\0\2\10\1\0\3\10\4\0\11\10\5\0"+
    "\14\10\1\350\10\10\31\0\3\11\1\351\1\0\2\11"+
    "\1\0\3\11\4\0\11\11\5\0\25\11\31\0\1\11"+
    "\1\220\1\11\1\352\1\0\2\11\1\0\3\11\4\0"+
    "\11\11\5\0\25\11\53\0\1\353\70\0\4\10\1\0"+
    "\2\10\1\0\1\354\2\10\4\0\11\10\5\0\25\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\7\10\1\355\15\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\11\10\1\356\13\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\6\10\1\357\16\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\6\10\1\360\16\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\6\10\1\361\16\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\10\10\1\362\14\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\6\10\1\363\16\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\23\10\1\364\1\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\2\10\1\365\22\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\13\10\1\366\11\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\22\10\1\367\2\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\6\10\1\370\16\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\16\10\1\371\6\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\7\10\1\372\15\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\6\10\1\373\16\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\13\10\1\374\11\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\10\10\1\375\14\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\3\10\1\376\21\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\14\10\1\377\10\10\31\0\4\10\1\0\1\u0100"+
    "\1\10\1\0\3\10\4\0\11\10\5\0\25\10\31\0"+
    "\4\10\1\0\1\u0101\1\10\1\0\3\10\4\0\11\10"+
    "\5\0\25\10\32\0\1\76\2\0\1\100\3\0\2\101"+
    "\1\102\5\0\1\101\3\0\1\101\11\0\1\102\1\0"+
    "\2\102\7\0\1\102\44\0\1\u0102\110\0\1\u0103\1\0"+
    "\1\u0104\1\0\2\271\1\0\3\102\5\0\1\102\3\0"+
    "\1\102\11\0\1\102\1\0\2\102\7\0\1\102\42\0"+
    "\1\u0105\1\0\1\u0106\112\0\1\341\107\0\3\10\1\u0107"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\25\10"+
    "\31\0\3\10\1\344\1\0\2\10\1\0\3\10\4\0"+
    "\11\10\5\0\25\10\34\0\1\u0108\110\0\1\274\1\0"+
    "\1\u0109\107\0\4\10\1\0\2\10\1\0\3\10\4\0"+
    "\11\10\5\0\13\10\1\u010a\11\10\31\0\4\10\1\0"+
    "\2\10\1\0\3\10\4\0\11\10\5\0\20\10\1\u010b"+
    "\4\10\31\0\3\11\1\u010c\1\0\2\11\1\0\3\11"+
    "\4\0\11\11\5\0\25\11\31\0\3\11\1\352\1\0"+
    "\2\11\1\0\3\11\4\0\11\11\5\0\25\11\54\0"+
    "\1\u010d\67\0\4\10\1\0\2\10\1\0\3\10\4\0"+
    "\11\10\5\0\2\10\1\u010e\22\10\31\0\4\10\1\0"+
    "\2\10\1\0\3\10\4\0\11\10\5\0\11\10\1\u010f"+
    "\13\10\31\0\4\10\1\0\2\10\1\0\3\10\4\0"+
    "\11\10\5\0\7\10\1\u0110\15\10\31\0\4\10\1\0"+
    "\2\10\1\0\3\10\4\0\11\10\5\0\1\10\1\u0111"+
    "\23\10\31\0\4\10\1\0\2\10\1\0\3\10\4\0"+
    "\11\10\5\0\7\10\1\u0112\15\10\31\0\4\10\1\0"+
    "\2\10\1\0\3\10\4\0\11\10\5\0\14\10\1\u0113"+
    "\10\10\31\0\4\10\1\0\2\10\1\0\3\10\4\0"+
    "\11\10\5\0\14\10\1\u0114\10\10\31\0\4\10\1\0"+
    "\2\10\1\0\3\10\4\0\11\10\5\0\12\10\1\u0115"+
    "\12\10\31\0\4\10\1\0\2\10\1\0\3\10\4\0"+
    "\11\10\5\0\14\10\1\u0116\10\10\31\0\4\10\1\0"+
    "\2\10\1\0\3\10\4\0\11\10\5\0\13\10\1\u0117"+
    "\11\10\31\0\4\10\1\0\2\10\1\0\3\10\4\0"+
    "\11\10\5\0\1\10\1\u0118\23\10\31\0\4\10\1\0"+
    "\2\10\1\0\3\10\4\0\11\10\5\0\22\10\1\u0119"+
    "\2\10\31\0\4\10\1\0\2\10\1\0\3\10\4\0"+
    "\11\10\5\0\4\10\1\u011a\20\10\34\0\1\u011b\112\0"+
    "\1\u011c\112\0\1\u0104\1\0\2\271\1\0\3\102\5\0"+
    "\1\102\3\0\1\102\11\0\1\102\1\0\2\102\7\0"+
    "\1\102\44\0\1\u011d\110\0\1\u0105\1\0\1\u011e\107\0"+
    "\1\10\1\212\2\10\1\0\2\10\1\0\3\10\4\0"+
    "\11\10\5\0\25\10\34\0\1\u011f\112\0\1\u0109\107\0"+
    "\4\10\1\0\2\10\1\0\3\10\4\0\11\10\5\0"+
    "\13\10\1\u0120\11\10\31\0\1\11\1\220\2\11\1\0"+
    "\2\11\1\0\3\11\4\0\11\11\5\0\25\11\55\0"+
    "\1\u0121\66\0\4\10\1\0\2\10\1\0\3\10\4\0"+
    "\11\10\5\0\5\10\1\u0122\17\10\31\0\4\10\1\0"+
    "\2\10\1\0\3\10\4\0\11\10\5\0\24\10\1\u0123"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\12\10\1\u0124\12\10\31\0\4\10\1\0\2\10"+
    "\1\0\2\10\1\u0125\4\0\11\10\5\0\25\10\31\0"+
    "\4\10\1\0\2\10\1\0\3\10\4\0\11\10\5\0"+
    "\10\10\1\u0126\14\10\31\0\4\10\1\0\2\10\1\0"+
    "\3\10\4\0\11\10\5\0\2\10\1\u0127\22\10\31\0"+
    "\4\10\1\0\2\10\1\0\3\10\4\0\11\10\5\0"+
    "\7\10\1\u0128\15\10\32\0\1\266\2\0\1\100\3\0"+
    "\2\101\1\102\5\0\1\101\3\0\1\101\11\0\1\102"+
    "\1\0\2\102\7\0\1\102\44\0\1\u0129\1\0\2\271"+
    "\1\0\3\102\5\0\1\102\3\0\1\102\11\0\1\102"+
    "\1\0\2\102\7\0\1\102\44\0\1\u012a\110\0\1\u0105"+
    "\1\0\1\u012b\110\0\1\274\112\0\1\u012c\111\0\4\10"+
    "\1\0\2\10\1\0\3\10\4\0\11\10\5\0\14\10"+
    "\1\u012d\10\10\31\0\4\10\1\0\2\10\1\0\3\10"+
    "\4\0\11\10\5\0\10\10\1\u012e\14\10\31\0\4\10"+
    "\1\0\1\u012f\1\10\1\0\3\10\4\0\11\10\5\0"+
    "\25\10\31\0\4\10\1\0\2\10\1\0\3\10\4\0"+
    "\11\10\5\0\7\10\1\u0130\15\10\31\0\4\10\1\0"+
    "\1\u0131\1\10\1\0\3\10\4\0\11\10\5\0\25\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\24\10\1\u0132\34\0\1\u0133\1\0\2\271\1\0"+
    "\3\102\5\0\1\102\3\0\1\102\11\0\1\102\1\0"+
    "\2\102\7\0\1\102\44\0\1\u0134\112\0\1\u012b\134\0"+
    "\1\u0135\65\0\4\10\1\0\1\u0136\1\10\1\0\3\10"+
    "\4\0\11\10\5\0\25\10\31\0\4\10\1\0\2\10"+
    "\1\0\3\10\4\0\11\10\5\0\13\10\1\u0137\11\10"+
    "\31\0\4\10\1\0\2\10\1\0\3\10\4\0\11\10"+
    "\5\0\13\10\1\u0138\11\10\32\0\1\u0103\3\0\2\271"+
    "\1\0\3\102\5\0\1\102\3\0\1\102\11\0\1\102"+
    "\1\0\2\102\7\0\1\102\42\0\1\u0105\137\0\1\u0139"+
    "\113\0\1\u013a\104\0\1\u013b\120\0\1\u013c\110\0\1\u013d"+
    "\105\0\1\u013e\100\0\1\u013f\125\0\1\u0140\121\0\1\u0141"+
    "\113\0\1\u0142\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\20\1\1\11\20\1\4\11\1\1"+
    "\1\11\13\1\1\11\2\0\1\1\1\11\1\1\2\11"+
    "\1\0\1\1\1\0\2\11\1\1\1\11\1\1\1\0"+
    "\3\1\3\11\3\0\2\11\1\0\2\11\35\1\1\11"+
    "\1\1\5\11\1\1\1\11\1\1\2\11\1\1\4\11"+
    "\1\1\1\11\1\1\1\0\2\1\1\11\10\1\1\11"+
    "\1\0\34\1\5\11\2\0\2\1\1\0\2\1\1\0"+
    "\6\1\1\0\36\1\1\0\2\1\1\0\5\1\1\0"+
    "\27\1\1\0\1\1\1\0\2\1\1\0\4\1\1\0"+
    "\17\1\1\0\3\1\1\0\10\1\1\0\1\1\1\0"+
    "\10\1\1\0\3\1\11\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int commentDepth = 0;

    public void goTo(int offset) {
        zzCurrentPos = zzMarkedPos = zzStartRead = offset;
        zzPushbackPos = 0;
        zzAtEOF = offset < zzEndRead;
    }


  public _CeylonLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _CeylonLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1892) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 113:
          { return CeylonTokenTypes.STRING_LITERAL;
          }
        case 114: break;
        case 72:
          { if (--commentDepth == 0) {
            yybegin(YYINITIAL);
            return CeylonTokenTypes.MULTI_LINE_COMMENT;
        }
          }
        case 115: break;
        case 35:
          { return CeylonTokenTypes.NOT_EQUAL_OPERATOR;
          }
        case 116: break;
        case 26:
          { return CeylonTokenTypes.MODULO_OPERATOR;
          }
        case 117: break;
        case 86:
          { return CeylonTokenTypes.CASE_KEYWORD;
          }
        case 118: break;
        case 65:
          { return CeylonTokenTypes.UNION_ASSIGN_OPERATOR;
          }
        case 119: break;
        case 82:
          { return CeylonTokenTypes.COMPARE_OPERATOR;
          }
        case 120: break;
        case 63:
          { return CeylonTokenTypes.INTERSECTION_ASSIGN_OPERATOR;
          }
        case 121: break;
        case 10:
          { return CeylonTokenTypes.MEMBER_OPERATOR;
          }
        case 122: break;
        case 97:
          { return CeylonTokenTypes.WHILE_KEYWORD;
          }
        case 123: break;
        case 33:
          { return CeylonTokenTypes.AMPERSAND_OPERATOR;
          }
        case 124: break;
        case 50:
          { return CeylonTokenTypes.QUOTED_LITERAL;
          }
        case 125: break;
        case 59:
          { return CeylonTokenTypes.ADD_ASSIGN_OPERATOR;
          }
        case 126: break;
        case 42:
          { return CeylonTokenTypes.RANGE_OPERATOR;
          }
        case 127: break;
        case 21:
          { return CeylonTokenTypes.LEFT_BRACKET_OPERATOR;
          }
        case 128: break;
        case 85:
          { return CeylonTokenTypes.THIS_KEYWORD;
          }
        case 129: break;
        case 68:
          { return CeylonTokenTypes.XOR_ASSIGN_OPERATOR;
          }
        case 130: break;
        case 61:
          { return CeylonTokenTypes.MODULO_ASSIGN_OPERATOR;
          }
        case 131: break;
        case 47:
          { return CeylonTokenTypes.ENTRY_OPERATOR;
          }
        case 132: break;
        case 53:
          { return CeylonTokenTypes.IS_KEYWORD;
          }
        case 133: break;
        case 74:
          { return CeylonTokenTypes.CHARACTER_LITERAL;
          }
        case 134: break;
        case 109:
          { return CeylonTokenTypes.NONEMPTY_KEYWORD;
          }
        case 135: break;
        case 8:
          { return CeylonTokenTypes.UPPERCASE_IDENTIFIER;
          }
        case 136: break;
        case 52:
          { return CeylonTokenTypes.IF_KEYWORD;
          }
        case 137: break;
        case 107:
          { return CeylonTokenTypes.FUNCTION_KEYWORD;
          }
        case 138: break;
        case 62:
          { return CeylonTokenTypes.GREATER_THAN_OR_EQUAL_TO_OPERATOR;
          }
        case 139: break;
        case 23:
          { return CeylonTokenTypes.DEFAULT_OPERATOR;
          }
        case 140: break;
        case 31:
          { return CeylonTokenTypes.XOR_OPERATOR;
          }
        case 141: break;
        case 112:
          { return CeylonTokenTypes.SATISFIES_KEYWORD;
          }
        case 142: break;
        case 28:
          { return CeylonTokenTypes.INTERSECTION_OPERATOR;
          }
        case 143: break;
        case 45:
          { return CeylonTokenTypes.DECREMENT_OPERATOR;
          }
        case 144: break;
        case 4:
          { return CeylonTokenTypes.HASH_OPERATOR;
          }
        case 145: break;
        case 14:
          { return CeylonTokenTypes.LEFT_BRACE_OPERATOR;
          }
        case 146: break;
        case 9:
          { return CeylonTokenTypes.DIGIT;
          }
        case 147: break;
        case 34:
          { return CeylonTokenTypes.SHELL_COMMENT;
          }
        case 148: break;
        case 103:
          { return CeylonTokenTypes.ADAPTS_KEYWORD;
          }
        case 149: break;
        case 60:
          { return CeylonTokenTypes.INCREMENT_OPERATOR;
          }
        case 150: break;
        case 30:
          { return CeylonTokenTypes.COMPLEMENT_OPERATOR;
          }
        case 151: break;
        case 32:
          { return CeylonTokenTypes.LESS_THAN_OPERATOR;
          }
        case 152: break;
        case 27:
          { return CeylonTokenTypes.GREATER_THAN_OPERATOR;
          }
        case 153: break;
        case 66:
          { return CeylonTokenTypes.OR_OPERATOR;
          }
        case 154: break;
        case 73:
          { return CeylonTokenTypes.ELLIPSES_OPERATOR;
          }
        case 155: break;
        case 80:
          { return CeylonTokenTypes.AND_ASSIGN_OPERATOR;
          }
        case 156: break;
        case 17:
          { return CeylonTokenTypes.COMMA_OPERATOR;
          }
        case 157: break;
        case 75:
          { return CeylonTokenTypes.FOR_KEYWORD;
          }
        case 158: break;
        case 105:
          { return CeylonTokenTypes.EXTENDS_KEYWORD;
          }
        case 159: break;
        case 101:
          { return CeylonTokenTypes.RETURN_KEYWORD;
          }
        case 160: break;
        case 83:
          { return CeylonTokenTypes.ELSE_KEYWORD;
          }
        case 161: break;
        case 38:
          { return CeylonTokenTypes.DIVIDE_ASSIGN_OPERATOR;
          }
        case 162: break;
        case 93:
          { return CeylonTokenTypes.CATCH_KEYWORD;
          }
        case 163: break;
        case 41:
          { return CeylonTokenTypes.FLOAT_LITERAL;
          }
        case 164: break;
        case 54:
          { return CeylonTokenTypes.IN_KEYWORD;
          }
        case 165: break;
        case 56:
          { return CeylonTokenTypes.ARRAY_OPERATOR;
          }
        case 166: break;
        case 78:
          { return CeylonTokenTypes.SPREAD_OPERATOR;
          }
        case 167: break;
        case 91:
          { return CeylonTokenTypes.THROW_KEYWORD;
          }
        case 168: break;
        case 95:
          { return CeylonTokenTypes.GIVEN_KEYWORD;
          }
        case 169: break;
        case 36:
          { return CeylonTokenTypes.LINE_COMMENT;
          }
        case 170: break;
        case 22:
          { return CeylonTokenTypes.RIGHT_BRACKET_OPERATOR;
          }
        case 171: break;
        case 6:
          { return CeylonTokenTypes.DIVIDE_OPERATOR;
          }
        case 172: break;
        case 44:
          { return CeylonTokenTypes.EXPONENT;
          }
        case 173: break;
        case 79:
          { return CeylonTokenTypes.IDENTICAL_OPERATOR;
          }
        case 174: break;
        case 99:
          { return CeylonTokenTypes.IMPORT_KEYWORD;
          }
        case 175: break;
        case 55:
          { return CeylonTokenTypes.OF_KEYWORD;
          }
        case 176: break;
        case 15:
          { return CeylonTokenTypes.RIGHT_BRACE_OPERATOR;
          }
        case 177: break;
        case 39:
          { return CeylonTokenTypes.DIGITS;
          }
        case 178: break;
        case 11:
          { return CeylonTokenTypes.SUBTRACT_OPERATOR;
          }
        case 179: break;
        case 40:
          { return CeylonTokenTypes.INTEGER_LITERAL;
          }
        case 180: break;
        case 81:
          { return CeylonTokenTypes.OR_ASSIGN_OPERATOR;
          }
        case 181: break;
        case 92:
          { return CeylonTokenTypes.CLASS_KEYWORD;
          }
        case 182: break;
        case 1:
          { return CeylonTokenTypes.PACKAGE_IDENTIFIER;
          }
        case 183: break;
        case 96:
          { return CeylonTokenTypes.VALUE_KEYWORD;
          }
        case 184: break;
        case 77:
          { return CeylonTokenTypes.TRY_KEYWORD;
          }
        case 185: break;
        case 25:
          { return CeylonTokenTypes.ADD_OPERATOR;
          }
        case 186: break;
        case 49:
          { return CeylonTokenTypes.MULTIPLY_ASSIGN_OPERATOR;
          }
        case 187: break;
        case 90:
          { return CeylonTokenTypes.OUTER_KEYWORD;
          }
        case 188: break;
        case 3:
          { return CeylonTokenTypes.WHITE_SPACE;
          }
        case 189: break;
        case 43:
          { return CeylonTokenTypes.APPLY_OPERATOR;
          }
        case 190: break;
        case 67:
          { return CeylonTokenTypes.COMPLEMENT_ASSIGN_OPERATOR;
          }
        case 191: break;
        case 29:
          { return CeylonTokenTypes.UNION_OPERATOR;
          }
        case 192: break;
        case 102:
          { return CeylonTokenTypes.ASSIGN_KEYWORD;
          }
        case 193: break;
        case 88:
          { return CeylonTokenTypes.FRACTIONAL_DIGITS;
          }
        case 194: break;
        case 2:
          { return CeylonTokenTypes.BAD_CHARACTER;
          }
        case 195: break;
        case 69:
          { return CeylonTokenTypes.LESS_THAN_OR_EQUAL_TO_OPERATOR;
          }
        case 196: break;
        case 18:
          { return CeylonTokenTypes.SEMICOLON_OPERATOR;
          }
        case 197: break;
        case 110:
          { return CeylonTokenTypes.INTERFACE_KEYWORD;
          }
        case 198: break;
        case 100:
          { return CeylonTokenTypes.OBJECT_KEYWORD;
          }
        case 199: break;
        case 87:
          { return CeylonTokenTypes.VOID_KEYWORD;
          }
        case 200: break;
        case 111:
          { return CeylonTokenTypes.ABSTRACTS_KEYWORD;
          }
        case 201: break;
        case 89:
          { return CeylonTokenTypes.BREAK_KEYWORD;
          }
        case 202: break;
        case 46:
          { return CeylonTokenTypes.SUBTRACT_ASSIGN_OPERATOR;
          }
        case 203: break;
        case 12:
          { return CeylonTokenTypes.MAGNITUDE;
          }
        case 204: break;
        case 58:
          { return CeylonTokenTypes.EQUAL_OPERATOR;
          }
        case 205: break;
        case 71:
          { commentDepth++;
          }
        case 206: break;
        case 57:
          { return CeylonTokenTypes.SAFE_MEMBER_OPERATOR;
          }
        case 207: break;
        case 37:
          { yybegin(MULTI_LINE_COMMENT);
        commentDepth++;
          }
        case 208: break;
        case 104:
          { return CeylonTokenTypes.SWITCH_KEYWORD;
          }
        case 209: break;
        case 16:
          { return CeylonTokenTypes.MULTIPLY_OPERATOR;
          }
        case 210: break;
        case 19:
          { return CeylonTokenTypes.LEFT_PARENTHESIS_OPERATOR;
          }
        case 211: break;
        case 5:
          { return CeylonTokenTypes.NOT_OPERATOR;
          }
        case 212: break;
        case 13:
          { return CeylonTokenTypes.FRACTIONAL_MAGNITUDE;
          }
        case 213: break;
        case 98:
          { return CeylonTokenTypes.EXISTS_KEYWORD;
          }
        case 214: break;
        case 76:
          { return CeylonTokenTypes.OUT_KEYWORD;
          }
        case 215: break;
        case 24:
          { return CeylonTokenTypes.SPECIFY_OPERATOR;
          }
        case 216: break;
        case 70:
          { return CeylonTokenTypes.ASSIGN_OPERATOR;
          }
        case 217: break;
        case 20:
          { return CeylonTokenTypes.RIGHT_PARENTHESIS_OPERATOR;
          }
        case 218: break;
        case 108:
          { return CeylonTokenTypes.CONTINUE_KEYWORD;
          }
        case 219: break;
        case 106:
          { return CeylonTokenTypes.FINALLY_KEYWORD;
          }
        case 220: break;
        case 94:
          { return CeylonTokenTypes.SUPER_KEYWORD;
          }
        case 221: break;
        case 64:
          { return CeylonTokenTypes.AND_OPERATOR;
          }
        case 222: break;
        case 51:
          { return CeylonTokenTypes.ESCAPE_SEQUENCE;
          }
        case 223: break;
        case 48:
          { return CeylonTokenTypes.POWER_OPERATOR;
          }
        case 224: break;
        case 7:
          { return CeylonTokenTypes.LOWERCASE_IDENTIFIER;
          }
        case 225: break;
        case 84:
          { return CeylonTokenTypes.THEN_KEYWORD;
          }
        case 226: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
