package au.com.machinecode.intellij.ceylon.lang.psi;

import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonAbbreviatedTypeImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonAbbreviationImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonAbstractedTypeImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonAdaptedTypesImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonAnnotationImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonArgumentsImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonAssignmentImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonAtomImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonAttributeGetterImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonAttributeHeaderImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonAttributeImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonAttributeMetaImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonAttributeSetterImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonBlockImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonBooleanConditionImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonBreakImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonCallableParamImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonCallableReferenceImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonCallableVariableImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonCaseImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonCaseItemImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonCaseTypeImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonCaseTypesImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonCasesImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonCatchImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonClassBodyImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonClassHeaderImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonClassImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonClassInheritanceImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonConditionImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonContinueImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonControlStructureImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonDeclarationImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonDefaultCaseItemImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonDirectiveImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonDirectiveStatementImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonElseImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonEntryParamPairImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonEntryTypeImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonEntryVariablePairImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonExistsOrIsNonemptyConditionImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonExpressionCaseImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonExpressionImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonExpressionStatementImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonExtendedTypeImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonFailImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonFinallyImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonForFailImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonForImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonForIteratorImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonFullPackageNameImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonFunctionMetaImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonFunctionalArgumentsImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonFunctionalBodyImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonFunctionalNamedArgumentImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonIfElseImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonIfImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonImportElementImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonImportElementsImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonImportImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonImportMethodAttributeElementImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonImportTypeElementImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonImportWildcardImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonIncrementOrDecrementImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonInitializerImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonInitializerReferenceImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonInterfaceBodyImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonInterfaceHeaderImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonInterfaceImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonInterfaceInheritanceImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonIntersectionTypeImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonInvocationImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonIsCaseImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonIsConditionImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonIteratorVariableImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonLiteralImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonLocalNamedArgumentImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonLoopConditionImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonMemberNameImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonMetaImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonMetaTypesImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonMethodAttributeAliasImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonMethodHeaderImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonMethodImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonMethodMetaImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonMethodReferenceImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonNamedArgumentImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonNamedArgumentsImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonObjectHeaderImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonObjectImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonObjectInheritanceImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonOperatorExpressionImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonOperatorImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonPackageNameImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonParExpressionImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonParamImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonParamsImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonPositionalArgumentsImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonPrimaryImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonReceiverImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonResourceDeclarationImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonResourceImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonReturnImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSatisfiedTypesImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSatisfiesCaseImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSatisfiesConditionImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSelfReferenceImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSequenceImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSequenceInstantiationImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSequencedParamImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSequencedTypeImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSequencedTypeParamImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSimpleAttributeImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSimpleParamImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSpecificationImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSpecifiedNamedArgumentImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSpecifierImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonStatementImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonStringTemplateImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSwitchCaseElseImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonSwitchImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonThrowImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTopLevelDeclarationImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTryCatchFinallyImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTryImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTypeAliasImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTypeArgumentsImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTypeConstraintImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTypeConstraintInheritanceImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTypeConstraintsImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTypeDeclarationImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTypeImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTypeMetaImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTypeNameImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTypeNameWithArgumentsImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTypeParamImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTypeParamsImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTypeSpecifierImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonTypedVariableImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonUnionTypeImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonValueMetaImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonValueReferenceImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonVariableImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonVarianceImpl;
import au.com.machinecode.intellij.ceylon.lang.psi.impl.CeylonWhileImpl;
import com.intellij.extapi.psi.ASTWrapperPsiElement;
import com.intellij.lang.ASTNode;
import com.intellij.psi.PsiElement;
import com.intellij.psi.tree.IElementType;

import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ABBREVIATED_TYPE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ABBREVIATION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ABSTRACTED_TYPE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ADAPTED_TYPES;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ANNOTATION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ARGUMENTS;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ASSIGNMENT;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ATOM;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ATTRIBUTE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ATTRIBUTE_GETTER;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ATTRIBUTE_HEADER;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ATTRIBUTE_META;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ATTRIBUTE_SETTER;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.BLOCK;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.BOOLEAN_CONDITION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.BREAK;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CALLABLE_PARAM;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CALLABLE_REFERENCE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CALLABLE_VARIABLE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CASE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CASES;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CASE_ITEM;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CASE_TYPE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CASE_TYPES;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CATCH;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CLASS;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CLASS_BODY;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CLASS_HEADER;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CLASS_INHERITANCE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CONDITION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CONTINUE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.CONTROL_STRUCTURE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.DECLARATION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.DEFAULT_CASE_ITEM;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.DIRECTIVE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.DIRECTIVE_STATEMENT;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ELSE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ENTRY_PARAM_PAIR;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ENTRY_TYPE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ENTRY_VARIABLE_PAIR;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.EXISTS_OR_IS_NONEMPTY_CONDITION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.EXPRESSION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.EXPRESSION_CASE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.EXPRESSION_STATEMENT;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.EXTENDED_TYPE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.FAIL;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.FINALLY;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.FOR;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.FOR_FAIL;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.FOR_ITERATOR;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.FULL_PACKAGE_NAME;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.FUNCTIONAL_ARGUMENTS;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.FUNCTIONAL_BODY;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.FUNCTIONAL_NAMED_ARGUMENT;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.FUNCTION_META;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.IF;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.IF_ELSE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.IMPORT;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.IMPORT_ELEMENT;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.IMPORT_ELEMENTS;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.IMPORT_METHOD_ATTRIBUTE_ELEMENT;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.IMPORT_TYPE_ELEMENT;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.IMPORT_WILDCARD;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.INCREMENT_OR_DECREMENT;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.INITIALIZER;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.INITIALIZER_REFERENCE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.INTERFACE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.INTERFACE_BODY;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.INTERFACE_HEADER;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.INTERFACE_INHERITANCE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.INTERSECTION_TYPE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.INVOCATION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.IS_CASE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.IS_CONDITION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.ITERATOR_VARIABLE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.LITERAL;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.LOCAL_NAMED_ARGUMENT;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.LOOP_CONDITION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.MEMBER_NAME;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.META;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.META_TYPES;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.METHOD;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.METHOD_ATTRIBUTE_ALIAS;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.METHOD_HEADER;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.METHOD_META;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.METHOD_REFERENCE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.NAMED_ARGUMENT;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.NAMED_ARGUMENTS;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.OBJECT;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.OBJECT_HEADER;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.OBJECT_INHERITANCE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.OPERATOR;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.OPERATOR_EXPRESSION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.PACKAGE_NAME;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.PARAM;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.PARAMS;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.PAR_EXPRESSION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.POSITIONAL_ARGUMENTS;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.PRIMARY;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.RECEIVER;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.RESOURCE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.RESOURCE_DECLARATION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.RETURN;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SATISFIED_TYPES;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SATISFIES_CASE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SATISFIES_CONDITION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SELF_REFERENCE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SEQUENCE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SEQUENCED_PARAM;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SEQUENCED_TYPE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SEQUENCED_TYPE_PARAM;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SEQUENCE_INSTANTIATION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SIMPLE_ATTRIBUTE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SIMPLE_PARAM;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SPECIFICATION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SPECIFIED_NAMED_ARGUMENT;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SPECIFIER;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.STATEMENT;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.STRING_TEMPLATE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SWITCH;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.SWITCH_CASE_ELSE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.THROW;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TOP_LEVEL_DECLARATION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TRY;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TRY_CATCH_FINALLY;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TYPE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TYPED_VARIABLE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TYPE_ALIAS;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TYPE_ARGUMENTS;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TYPE_CONSTRAINT;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TYPE_CONSTRAINTS;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TYPE_CONSTRAINT_INHERITANCE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TYPE_DECLARATION;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TYPE_META;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TYPE_NAME;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TYPE_NAME_WITH_ARGUMENTS;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TYPE_PARAM;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TYPE_PARAMS;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.TYPE_SPECIFIER;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.UNION_TYPE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.VALUE_META;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.VALUE_REFERENCE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.VARIABLE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.VARIANCE;
import static au.com.machinecode.intellij.ceylon.lang.CeylonElementTypes.WHILE;

public class CeylonPsiCreator {

    public static PsiElement createElement(final ASTNode node) {
        final IElementType type = node.getElementType();
        if (type == ABBREVIATION) return new CeylonAbbreviationImpl();
        if (type == ABBREVIATED_TYPE) return new CeylonAbbreviatedTypeImpl();
        if (type == ABSTRACTED_TYPE) return new CeylonAbstractedTypeImpl();
        if (type == ADAPTED_TYPES) return new CeylonAdaptedTypesImpl();
        if (type == ANNOTATION) return new CeylonAnnotationImpl();
        if (type == ARGUMENTS) return new CeylonArgumentsImpl();
        if (type == ASSIGNMENT) return new CeylonAssignmentImpl();
        if (type == ATOM) return new CeylonAtomImpl();
        if (type == ATTRIBUTE_GETTER) return new CeylonAttributeGetterImpl();
        if (type == ATTRIBUTE_HEADER) return new CeylonAttributeHeaderImpl();
        if (type == ATTRIBUTE) return new CeylonAttributeImpl();
        if (type == ATTRIBUTE_META) return new CeylonAttributeMetaImpl();
        if (type == ATTRIBUTE_SETTER) return new CeylonAttributeSetterImpl();
        if (type == BLOCK) return new CeylonBlockImpl();
        if (type == BOOLEAN_CONDITION) return new CeylonBooleanConditionImpl();
        if (type == BREAK) return new CeylonBreakImpl();
        if (type == CALLABLE_PARAM) return new CeylonCallableParamImpl();
        if (type == CALLABLE_REFERENCE) return new CeylonCallableReferenceImpl();
        if (type == CALLABLE_VARIABLE) return new CeylonCallableVariableImpl();
        if (type == CASE_ITEM) return new CeylonCaseItemImpl();
        if (type == CASE) return new CeylonCaseImpl();
        if (type == CASES) return new CeylonCasesImpl();
        if (type == CASE_TYPE) return new CeylonCaseTypeImpl();
        if (type == CASE_TYPES) return new CeylonCaseTypesImpl();
        if (type == CATCH) return new CeylonCatchImpl();
        if (type == CLASS_BODY) return new CeylonClassBodyImpl();
        if (type == CLASS_HEADER) return new CeylonClassHeaderImpl();
        if (type == CLASS_INHERITANCE) return new CeylonClassInheritanceImpl();
        if (type == CLASS) return new CeylonClassImpl();
        //if (type == COMPILATION_UNIT) return new CeylonCompilationUnitImpl();
        if (type == CONDITION) return new CeylonConditionImpl();
        if (type == CONTINUE) return new CeylonContinueImpl();
        if (type == CONTROL_STRUCTURE) return new CeylonControlStructureImpl();
        if (type == DECLARATION) return new CeylonDeclarationImpl();
        if (type == DEFAULT_CASE_ITEM) return new CeylonDefaultCaseItemImpl();
        if (type == DIRECTIVE) return new CeylonDirectiveImpl();
        if (type == DIRECTIVE_STATEMENT) return new CeylonDirectiveStatementImpl();
        if (type == ELSE) return new CeylonElseImpl();
        if (type == ENTRY_PARAM_PAIR) return new CeylonEntryParamPairImpl();
        if (type == ENTRY_TYPE) return new CeylonEntryTypeImpl();
        if (type == ENTRY_VARIABLE_PAIR) return new CeylonEntryVariablePairImpl();
        if (type == EXISTS_OR_IS_NONEMPTY_CONDITION) return new CeylonExistsOrIsNonemptyConditionImpl();
        if (type == EXPRESSION) return new CeylonExpressionImpl();
        if (type == EXPRESSION_STATEMENT) return new CeylonExpressionStatementImpl();
        if (type == EXTENDED_TYPE) return new CeylonExtendedTypeImpl();
        if (type == FAIL) return new CeylonFailImpl();
        if (type == FINALLY) return new CeylonFinallyImpl();
        if (type == FOR_FAIL) return new CeylonForFailImpl();
        if (type == FOR_ITERATOR) return new CeylonForIteratorImpl();
        if (type == FOR) return new CeylonForImpl();
        if (type == FULL_PACKAGE_NAME) return new CeylonFullPackageNameImpl();
        if (type == FUNCTIONAL_ARGUMENTS) return new CeylonFunctionalArgumentsImpl();
        if (type == FUNCTIONAL_BODY) return new CeylonFunctionalBodyImpl();
        if (type == FUNCTIONAL_NAMED_ARGUMENT) return new CeylonFunctionalNamedArgumentImpl();
        if (type == FUNCTION_META) return new CeylonFunctionMetaImpl();
        if (type == IF_ELSE) return new CeylonIfElseImpl();
        if (type == IF) return new CeylonIfImpl();
        if (type == IMPORT_ELEMENT) return new CeylonImportElementImpl();
        if (type == IMPORT_ELEMENTS) return new CeylonImportElementsImpl();
        if (type == IMPORT) return new CeylonImportImpl();
        if (type == IMPORT_METHOD_ATTRIBUTE_ELEMENT) return new CeylonImportMethodAttributeElementImpl();
        if (type == IMPORT_TYPE_ELEMENT) return new CeylonImportTypeElementImpl();
        if (type == IMPORT_WILDCARD) return new CeylonImportWildcardImpl();
        if (type == INCREMENT_OR_DECREMENT) return new CeylonIncrementOrDecrementImpl();
        if (type == INITIALIZER) return new CeylonInitializerImpl();
        if (type == INITIALIZER_REFERENCE) return new CeylonInitializerReferenceImpl();
        if (type == INTERFACE_BODY) return new CeylonInterfaceBodyImpl();
        if (type == INTERFACE_HEADER) return new CeylonInterfaceHeaderImpl();
        if (type == INTERFACE_INHERITANCE) return new CeylonInterfaceInheritanceImpl();
        if (type == INTERFACE) return new CeylonInterfaceImpl();
        if (type == INTERSECTION_TYPE) return new CeylonIntersectionTypeImpl();
        if (type == INVOCATION) return new CeylonInvocationImpl();
        if (type == IS_CONDITION) return new CeylonIsConditionImpl();
        if (type == ITERATOR_VARIABLE) return new CeylonIteratorVariableImpl();
        if (type == LITERAL) return new CeylonLiteralImpl();
        if (type == LOCAL_NAMED_ARGUMENT) return new CeylonLocalNamedArgumentImpl();
        if (type == LOOP_CONDITION) return new CeylonLoopConditionImpl();
        if (type == MEMBER_NAME) return new CeylonMemberNameImpl();
        if (type == META) return new CeylonMetaImpl();
        if (type == META_TYPES) return new CeylonMetaTypesImpl();
        if (type == METHOD_ATTRIBUTE_ALIAS) return new CeylonMethodAttributeAliasImpl();
        if (type == METHOD_HEADER) return new CeylonMethodHeaderImpl();
        if (type == METHOD) return new CeylonMethodImpl();
        if (type == METHOD_META) return new CeylonMethodMetaImpl();
        if (type == METHOD_REFERENCE) return new CeylonMethodReferenceImpl();
        if (type == NAMED_ARGUMENT) return new CeylonNamedArgumentImpl();
        if (type == NAMED_ARGUMENTS) return new CeylonNamedArgumentsImpl();
        if (type == OBJECT_HEADER) return new CeylonObjectHeaderImpl();
        if (type == OBJECT_INHERITANCE) return new CeylonObjectInheritanceImpl();
        if (type == OBJECT) return new CeylonObjectImpl();
        if (type == OPERATOR_EXPRESSION) return new CeylonOperatorExpressionImpl();
        if (type == OPERATOR) return new CeylonOperatorImpl();
        if (type == PACKAGE_NAME) return new CeylonPackageNameImpl();
        if (type == PARAM) return new CeylonParamImpl();
        if (type == PARAMS) return new CeylonParamsImpl();
        if (type == PAR_EXPRESSION) return new CeylonParExpressionImpl();
        if (type == POSITIONAL_ARGUMENTS) return new CeylonPositionalArgumentsImpl();
        if (type == PRIMARY) return new CeylonPrimaryImpl();
        if (type == RECEIVER) return new CeylonReceiverImpl();
        if (type == RESOURCE) return new CeylonResourceImpl();
        if (type == RETURN) return new CeylonReturnImpl();
        if (type == SATISFIED_TYPES) return new CeylonSatisfiedTypesImpl();
        if (type == SATISFIES_CONDITION) return new CeylonSatisfiesConditionImpl();
        if (type == SELF_REFERENCE) return new CeylonSelfReferenceImpl();
        if (type == SEQUENCED_PARAM) return new CeylonSequencedParamImpl();
        if (type == SEQUENCED_TYPE) return new CeylonSequencedTypeImpl();
        if (type == SEQUENCED_TYPE_PARAM) return new CeylonSequencedTypeParamImpl();
        if (type == SEQUENCE_INSTANTIATION) return new CeylonSequenceInstantiationImpl();
        if (type == SEQUENCE) return new CeylonSequenceImpl();
        if (type == SIMPLE_ATTRIBUTE) return new CeylonSimpleAttributeImpl();
        if (type == SIMPLE_PARAM) return new CeylonSimpleParamImpl();
        if (type == SPECIFICATION) return new CeylonSpecificationImpl();
        if (type == SPECIFIED_NAMED_ARGUMENT) return new CeylonSpecifiedNamedArgumentImpl();
        if (type == SPECIFIER) return new CeylonSpecifierImpl();
        if (type == STATEMENT) return new CeylonStatementImpl();
        if (type == STRING_TEMPLATE) return new CeylonStringTemplateImpl();
        if (type == SWITCH_CASE_ELSE) return new CeylonSwitchCaseElseImpl();
        if (type == SWITCH) return new CeylonSwitchImpl();
        if (type == THROW) return new CeylonThrowImpl();
        if (type == TOP_LEVEL_DECLARATION) return new CeylonTopLevelDeclarationImpl();
        if (type == TRY_CATCH_FINALLY) return new CeylonTryCatchFinallyImpl();
        if (type == TRY) return new CeylonTryImpl();
        if (type == TYPE_ALIAS) return new CeylonTypeAliasImpl();
        if (type == TYPE_ARGUMENTS) return new CeylonTypeArgumentsImpl();
        if (type == TYPE_CONSTRAINT) return new CeylonTypeConstraintImpl();
        if (type == TYPE_CONSTRAINTS) return new CeylonTypeConstraintsImpl();
        if (type == TYPE_CONSTRAINT_INHERITANCE) return new CeylonTypeConstraintInheritanceImpl();
        if (type == TYPE_DECLARATION) return new CeylonTypeDeclarationImpl();
        if (type == TYPED_VARIABLE) return new CeylonTypedVariableImpl();
        if (type == TYPE) return new CeylonTypeImpl();
        if (type == TYPE_META) return new CeylonTypeMetaImpl();
        if (type == TYPE_NAME) return new CeylonTypeNameImpl();
        if (type == TYPE_NAME_WITH_ARGUMENTS) return new CeylonTypeNameWithArgumentsImpl();
        if (type == TYPE_PARAM) return new CeylonTypeParamImpl();
        if (type == TYPE_PARAMS) return new CeylonTypeParamsImpl();
        if (type == TYPE_SPECIFIER) return new CeylonTypeSpecifierImpl();
        if (type == UNION_TYPE) return new CeylonUnionTypeImpl();
        if (type == VALUE_META) return new CeylonValueMetaImpl();
        if (type == VALUE_REFERENCE) return new CeylonValueReferenceImpl();
        if (type == VARIABLE) return new CeylonVariableImpl();
        if (type == VARIANCE) return new CeylonVarianceImpl();
        if (type == WHILE) return new CeylonWhileImpl();

        if (type == EXPRESSION_CASE) return new CeylonExpressionCaseImpl();
        if (type == IS_CASE) return new CeylonIsCaseImpl();
        if (type == SATISFIES_CASE) return new CeylonSatisfiesCaseImpl();

        if (type == RESOURCE_DECLARATION) return new CeylonResourceDeclarationImpl();

        return new ASTWrapperPsiElement(node);
    }
}