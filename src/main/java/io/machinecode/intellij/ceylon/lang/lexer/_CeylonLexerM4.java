/* The following code was generated by JFlex 1.4.3 on 11/14/12 8:26 PM */

package io.machinecode.intellij.ceylon.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/14/12 8:26 PM from the specification file
 * <tt>/home/brent/work/intellij-ceylon/src/main/java/io/machinecode/intellij/ceylon/lang/lexer/ceylon_m4.jflex</tt>
 */
public class _CeylonLexerM4 implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTI_LINE_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\4\1\0\1\1\1\5\22\0\1\1\1\3\1\25"+
    "\1\2\1\0\1\74\1\66\1\26\1\61\1\62\1\31\1\73\1\54"+
    "\1\17\1\14\1\6\12\13\1\72\1\55\1\70\1\56\1\71\1\65"+
    "\1\77\4\10\1\16\1\10\1\21\1\10\1\10\3\10\1\21\2\10"+
    "\1\21\3\10\1\21\6\10\1\63\1\24\1\64\1\75\1\12\1\23"+
    "\1\41\1\27\1\37\1\47\1\15\1\30\1\45\1\51\1\7\1\44"+
    "\1\20\1\40\1\32\1\43\1\34\1\33\1\11\1\35\1\42\1\36"+
    "\1\22\1\46\1\52\1\50\1\53\1\11\1\57\1\67\1\60\1\76"+
    "\53\0\1\11\12\0\1\11\4\0\1\11\5\0\27\10\1\0\7\10"+
    "\30\11\1\0\10\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\2\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\2\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\2\10\1\11\1\10\1\11\1\10\3\11\2\10\1\11\1\10"+
    "\1\11\2\10\1\11\3\10\2\11\4\10\1\11\2\10\1\11\3\10"+
    "\3\11\2\10\1\11\2\10\1\11\1\10\1\11\1\10\1\11\2\10"+
    "\1\11\1\10\2\11\1\10\1\11\2\10\1\11\3\10\1\11\1\10"+
    "\1\11\2\10\2\11\1\0\1\10\3\11\4\0\1\10\1\0\1\11"+
    "\1\10\1\0\1\11\1\10\1\0\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\2\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\2\11"+
    "\1\10\1\0\1\11\1\10\1\11\3\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\7\11\2\10\1\11\2\10\2\11\1\10"+
    "\1\11\4\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\105\11\1\0\44\11\7\0\2\11\36\0\5\11\140\0\1\11\52\0"+
    "\1\10\1\11\1\10\1\11\2\0\1\10\1\11\2\0\4\11\10\0"+
    "\1\10\1\0\3\10\1\0\1\10\1\0\2\10\1\11\21\10\1\0"+
    "\11\10\43\11\1\10\2\11\3\10\3\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\5\11"+
    "\1\10\1\11\1\0\1\10\1\11\2\10\2\11\63\10\60\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\10\0\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\2\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\2\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\11\0\46\10\12\0\47\11\u0b18\0\46\10\u0c3a\0\300\11\100\0\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\11\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\11\11\10\10\6\11\2\0"+
    "\6\10\2\0\10\11\10\10\10\11\10\10\6\11\2\0\6\10\2\0"+
    "\10\11\1\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10\10\11"+
    "\10\10\16\11\2\0\10\11\10\0\10\11\10\0\10\11\10\0\5\11"+
    "\1\0\2\11\4\10\2\0\1\11\3\0\3\11\1\0\2\11\4\10"+
    "\4\0\4\11\2\0\2\11\4\10\4\0\10\11\5\10\5\0\3\11"+
    "\1\0\2\11\4\10\224\0\5\11\155\0\1\10\4\0\1\10\2\0"+
    "\1\11\3\10\2\11\3\10\1\11\1\0\1\10\3\0\5\10\6\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0\1\11\4\10"+
    "\1\11\4\0\1\11\2\0\2\11\2\10\5\0\1\10\4\11\4\0"+
    "\1\11\21\0\20\10\20\11\3\0\1\10\1\11\u0331\0\32\10\32\11"+
    "\u0716\0\57\10\1\0\57\11\1\0\1\10\1\11\3\10\2\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\4\10\1\11\1\10\2\11\1\10"+
    "\10\11\3\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\2\11\6\0\1\10\1\11\1\10\1\11\21\0\46\11\u791a\0\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\22\0\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\212\0\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\3\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\12\11\1\10\1\11\1\10"+
    "\1\11\2\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\3\0\1\10\1\11\1\10\1\11\1\0\1\10\1\11\16\0"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\120\0\1\11\u5305\0\7\11\14\0\5\11\u0409\0\32\10\6\0\32\11"+
    "\245\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\6\1\10\1\11\1\6\1\12\3\1\2\6\1\13"+
    "\12\6\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\1"+
    "\1\32\1\33\1\34\1\35\1\36\2\0\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\6\1\45\1\46\1\0"+
    "\1\10\1\0\1\10\1\47\1\50\1\51\2\6\1\52"+
    "\1\53\1\54\4\0\1\55\1\0\1\56\4\6\1\57"+
    "\1\60\2\6\1\61\21\6\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\2\37\2\41\2\6"+
    "\1\0\1\10\1\47\1\103\3\6\1\104\2\0\1\55"+
    "\3\6\1\105\1\106\2\6\1\107\22\6\1\110\1\111"+
    "\1\112\1\113\1\114\2\6\1\0\1\10\1\47\1\0"+
    "\1\115\2\6\1\0\6\6\1\116\1\117\4\6\1\120"+
    "\10\6\1\121\4\6\1\10\2\47\1\0\2\6\1\0"+
    "\1\122\2\6\1\123\2\6\1\124\1\6\1\125\1\126"+
    "\3\6\1\127\3\6\1\130\1\131\1\132\1\133\1\6"+
    "\1\0\1\47\1\134\1\6\1\0\2\6\1\135\1\136"+
    "\2\6\1\137\1\140\1\6\1\141\2\6\1\47\1\142"+
    "\1\0\1\143\6\6\1\47\1\0\1\144\1\145\2\6"+
    "\1\146\1\147\1\47\1\0\1\150\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\200\0\200"+
    "\0\u0780\0\200\0\200\0\200\0\200\0\u07c0\0\200\0\u0800"+
    "\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00"+
    "\0\u0a40\0\200\0\u0a80\0\u0ac0\0\u0b00\0\200\0\u0b40\0\200"+
    "\0\200\0\u0240\0\u0b80\0\u0240\0\u0bc0\0\u0c00\0\u0c40\0\u0c80"+
    "\0\200\0\200\0\u0cc0\0\200\0\u0d00\0\u0d40\0\200\0\200"+
    "\0\200\0\u0d80\0\u0dc0\0\u03c0\0\u0e00\0\200\0\u0400\0\200"+
    "\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\200\0\200\0\u0f40\0\u0f80"+
    "\0\u0240\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340"+
    "\0\u1380\0\u13c0\0\u1400\0\u1440\0\200\0\200\0\u1480\0\200"+
    "\0\u14c0\0\u1500\0\200\0\200\0\200\0\200\0\200\0\200"+
    "\0\200\0\200\0\200\0\200\0\u1540\0\200\0\u1580\0\u15c0"+
    "\0\u1600\0\u1640\0\u1680\0\u16c0\0\200\0\u1700\0\u1740\0\u1780"+
    "\0\200\0\u17c0\0\u1800\0\u03c0\0\u1840\0\u1880\0\u18c0\0\u0240"+
    "\0\u1900\0\u1940\0\u1980\0\u0240\0\u19c0\0\u1a00\0\u1a40\0\u1a80"+
    "\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80"+
    "\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\200\0\200"+
    "\0\200\0\200\0\200\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40"+
    "\0\u1f80\0\u0240\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100"+
    "\0\u2140\0\u2180\0\u21c0\0\u0240\0\u0240\0\u2200\0\u2240\0\u2280"+
    "\0\u22c0\0\u0240\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440"+
    "\0\u2480\0\u24c0\0\u0240\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600"+
    "\0\u2640\0\u2680\0\u2680\0\u26c0\0\u2700\0\u2740\0\u0240\0\u2780"+
    "\0\u27c0\0\u0240\0\u2800\0\u2840\0\u0240\0\u2880\0\u0240\0\u0240"+
    "\0\u28c0\0\u2900\0\u2940\0\u0240\0\u2980\0\u29c0\0\u2a00\0\u0240"+
    "\0\u0240\0\u0240\0\u0240\0\u2a40\0\u2a80\0\u2ac0\0\u0240\0\u2b00"+
    "\0\u2b40\0\u2b80\0\u2bc0\0\u0240\0\u0240\0\u2c00\0\u2c40\0\u0240"+
    "\0\u0240\0\u2c80\0\u0240\0\u2cc0\0\u2d00\0\u2d40\0\u0240\0\u2d80"+
    "\0\u0240\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40"+
    "\0\u2f80\0\u0240\0\u0240\0\u2fc0\0\u3000\0\u0240\0\u0240\0\u3040"+
    "\0\u3080\0\u0240\0\u0240";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\2\4\1\7\1\10\1\11"+
    "\2\12\1\13\1\14\1\15\1\11\1\16\1\12\1\11"+
    "\1\12\1\17\1\3\1\20\1\21\1\22\1\23\1\24"+
    "\2\12\1\25\1\26\1\27\1\30\1\12\1\31\1\32"+
    "\1\33\1\12\1\34\1\35\3\12\1\36\1\12\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\6\0\1\63\22\0\1\64\147\0"+
    "\1\4\2\0\2\4\75\0\1\65\152\0\1\66\27\0"+
    "\1\67\22\0\1\70\24\0\1\71\30\0\5\12\1\0"+
    "\2\12\1\0\3\12\4\0\1\12\1\72\1\0\1\73"+
    "\7\12\1\74\1\75\10\12\33\0\5\11\1\0\2\11"+
    "\1\0\3\11\4\0\2\11\1\0\22\11\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\2\12\1\0\22\12"+
    "\36\0\1\76\1\77\1\100\3\0\2\101\1\102\5\0"+
    "\1\102\1\0\2\102\7\0\1\102\50\0\1\103\41\0"+
    "\1\104\30\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\2\12\1\0\6\12\1\105\7\12\1\106\3\12\43\0"+
    "\1\107\36\0\1\110\12\0\1\111\6\0\23\112\1\0"+
    "\1\113\53\112\24\114\1\115\1\116\52\114\26\117\1\120"+
    "\51\117\7\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\2\12\1\0\3\12\1\121\16\12\33\0\1\122\4\12"+
    "\1\0\2\12\1\0\2\12\1\123\4\0\2\12\1\0"+
    "\2\12\1\124\17\12\55\0\1\125\24\0\1\126\30\0"+
    "\5\12\1\0\2\12\1\0\2\12\1\127\4\0\1\130"+
    "\1\131\1\0\22\12\33\0\5\12\1\0\1\132\1\12"+
    "\1\0\3\12\4\0\2\12\1\0\22\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\2\12\1\0\3\12"+
    "\1\133\13\12\1\134\2\12\33\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\2\12\1\0\2\12\1\135\3\12"+
    "\1\136\1\137\12\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\1\140\1\12\1\0\10\12\1\141\4\12"+
    "\1\142\4\12\33\0\5\12\1\0\2\12\1\0\2\12"+
    "\1\143\4\0\2\12\1\0\7\12\1\144\10\12\1\145"+
    "\1\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\2\12\1\0\2\12\1\146\17\12\33\0\1\147\4\12"+
    "\1\0\2\12\1\0\3\12\4\0\2\12\1\0\22\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\2\12"+
    "\1\0\2\12\1\150\4\12\1\151\12\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\2\12\1\0\17\12"+
    "\1\152\2\12\102\0\1\153\105\0\1\154\27\0\1\155"+
    "\141\0\1\156\7\0\1\157\67\0\1\160\10\0\1\161"+
    "\66\0\1\162\77\0\1\163\77\0\1\164\77\0\1\165"+
    "\14\0\1\166\62\0\1\167\77\0\1\170\77\0\1\171"+
    "\52\0\1\172\54\0\1\173\71\0\4\65\1\174\1\175"+
    "\72\65\4\67\1\176\1\177\72\67\7\0\5\12\1\0"+
    "\2\12\1\0\3\12\4\0\2\12\1\0\1\12\1\200"+
    "\20\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\2\12\1\0\4\12\1\201\15\12\37\0\1\202\76\0"+
    "\1\76\1\203\1\100\3\0\2\101\1\102\5\0\1\102"+
    "\1\0\2\102\7\0\1\102\47\0\1\204\100\0\1\205"+
    "\72\0\5\12\1\0\2\12\1\0\3\12\4\0\2\12"+
    "\1\0\10\12\1\206\11\12\33\0\1\207\4\12\1\0"+
    "\2\12\1\0\3\12\4\0\2\12\1\0\4\12\1\210"+
    "\15\12\47\0\1\211\63\0\5\212\1\0\2\212\1\0"+
    "\3\212\4\112\2\213\1\0\3\212\2\213\4\212\1\213"+
    "\10\212\24\0\24\114\1\115\1\214\52\114\7\0\5\12"+
    "\1\0\1\215\1\12\1\0\3\12\4\0\2\12\1\0"+
    "\22\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\2\12\1\0\11\12\1\216\10\12\33\0\5\12\1\0"+
    "\2\12\1\0\3\12\4\0\2\12\1\0\11\12\1\217"+
    "\10\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\2\12\1\0\3\12\1\220\16\12\33\0\5\12\1\0"+
    "\2\12\1\0\3\12\4\0\2\12\1\0\4\12\1\221"+
    "\15\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\2\12\1\0\12\12\1\222\7\12\33\0\5\12\1\0"+
    "\2\12\1\0\3\12\4\0\2\12\1\0\4\12\1\223"+
    "\15\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\2\12\1\0\21\12\1\224\33\0\1\225\4\12\1\0"+
    "\1\226\1\12\1\0\3\12\4\0\2\12\1\0\3\12"+
    "\1\227\16\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\0\11\12\1\230\10\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\2\12\1\0\7\12"+
    "\1\231\12\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\0\4\12\1\232\3\12\1\233\11\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\2\12"+
    "\1\0\10\12\1\234\11\12\33\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\2\12\1\0\10\12\1\235\11\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\2\12"+
    "\1\0\7\12\1\236\12\12\33\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\2\12\1\0\1\12\1\237\20\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\2\12"+
    "\1\0\4\12\1\240\15\12\33\0\1\241\4\12\1\0"+
    "\2\12\1\0\3\12\4\0\2\12\1\0\22\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\2\12\1\0"+
    "\11\12\1\242\10\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\2\12\1\0\14\12\1\243\5\12\33\0"+
    "\1\244\4\12\1\0\2\12\1\0\3\12\4\0\2\12"+
    "\1\0\22\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\0\6\12\1\245\13\12\33\0\1\246"+
    "\4\12\1\0\2\12\1\0\3\12\4\0\2\12\1\0"+
    "\22\12\102\0\1\247\35\0\1\250\141\0\1\251\77\0"+
    "\1\252\112\0\1\253\12\0\1\174\77\0\1\176\102\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\2\12\1\0"+
    "\2\12\1\254\17\12\33\0\5\12\1\0\1\255\1\12"+
    "\1\0\3\12\4\0\2\12\1\0\22\12\37\0\1\256"+
    "\76\0\1\76\1\257\1\100\3\0\2\101\1\102\5\0"+
    "\1\102\1\0\2\102\7\0\1\102\47\0\1\260\1\0"+
    "\2\261\1\0\3\102\5\0\1\102\1\0\2\102\7\0"+
    "\1\102\43\0\5\12\1\0\1\262\1\12\1\0\3\12"+
    "\4\0\2\12\1\0\22\12\33\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\2\12\1\0\10\12\1\263\11\12"+
    "\33\0\5\12\1\0\1\264\1\12\1\0\3\12\4\0"+
    "\2\12\1\0\22\12\33\0\5\265\1\0\2\265\1\0"+
    "\3\265\4\0\2\265\1\0\22\265\33\0\5\265\1\0"+
    "\2\265\1\0\3\265\1\211\3\0\2\265\1\0\22\265"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\2\12"+
    "\1\0\7\12\1\266\12\12\33\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\2\12\1\0\7\12\1\267\12\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\2\12"+
    "\1\0\5\12\1\270\14\12\33\0\5\12\1\0\1\271"+
    "\1\12\1\0\3\12\4\0\2\12\1\0\22\12\33\0"+
    "\5\12\1\0\1\272\1\12\1\0\3\12\4\0\2\12"+
    "\1\0\22\12\33\0\5\12\1\0\2\12\1\0\2\12"+
    "\1\273\4\0\2\12\1\0\22\12\33\0\5\12\1\0"+
    "\2\12\1\0\3\12\4\0\2\12\1\0\10\12\1\274"+
    "\11\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\2\12\1\0\11\12\1\275\10\12\33\0\5\12\1\0"+
    "\2\12\1\0\3\12\4\0\2\12\1\0\2\12\1\276"+
    "\17\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\2\12\1\0\4\12\1\277\15\12\33\0\5\12\1\0"+
    "\2\12\1\0\3\12\4\0\2\12\1\0\10\12\1\300"+
    "\11\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\2\12\1\0\5\12\1\301\14\12\33\0\5\12\1\0"+
    "\1\302\1\12\1\0\3\12\4\0\2\12\1\0\22\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\2\12"+
    "\1\0\4\12\1\303\15\12\33\0\1\304\4\12\1\0"+
    "\2\12\1\0\3\12\4\0\2\12\1\0\22\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\2\12\1\0"+
    "\1\12\1\305\20\12\33\0\5\12\1\0\1\306\1\12"+
    "\1\0\3\12\4\0\2\12\1\0\22\12\33\0\1\307"+
    "\4\12\1\0\2\12\1\0\3\12\4\0\2\12\1\0"+
    "\22\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\2\12\1\0\4\12\1\310\15\12\33\0\5\12\1\0"+
    "\1\311\1\12\1\0\3\12\4\0\2\12\1\0\22\12"+
    "\33\0\5\12\1\0\1\312\1\12\1\0\3\12\4\0"+
    "\2\12\1\0\22\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\2\12\1\0\15\12\1\313\4\12\33\0"+
    "\5\12\1\0\2\12\1\0\2\12\1\314\4\0\2\12"+
    "\1\0\22\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\0\6\12\1\315\13\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\2\12\1\0\3\12"+
    "\1\316\16\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\0\3\12\1\317\16\12\37\0\1\320"+
    "\77\0\1\257\1\100\3\0\2\101\1\102\5\0\1\102"+
    "\1\0\2\102\7\0\1\102\47\0\1\321\1\0\2\261"+
    "\1\0\3\102\5\0\1\102\1\0\2\102\7\0\1\102"+
    "\47\0\1\322\3\0\1\323\53\0\1\323\13\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\2\12\1\0\4\12"+
    "\1\324\15\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\0\11\12\1\325\10\12\33\0\5\326"+
    "\1\0\2\326\1\0\3\326\4\0\2\326\1\0\22\326"+
    "\33\0\5\12\1\0\2\12\1\0\1\327\2\12\4\0"+
    "\2\12\1\0\22\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\2\12\1\0\6\12\1\330\13\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\2\12\1\0"+
    "\4\12\1\331\15\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\2\12\1\0\3\12\1\332\16\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\2\12\1\0"+
    "\5\12\1\333\14\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\2\12\1\0\3\12\1\334\16\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\2\12\1\0"+
    "\20\12\1\335\1\12\33\0\1\336\4\12\1\0\2\12"+
    "\1\0\3\12\4\0\2\12\1\0\22\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\2\12\1\0\10\12"+
    "\1\337\11\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\0\17\12\1\340\2\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\2\12\1\0\3\12"+
    "\1\341\16\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\0\13\12\1\342\6\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\2\12\1\0\4\12"+
    "\1\343\15\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\0\3\12\1\344\16\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\2\12\1\0\10\12"+
    "\1\345\11\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\0\5\12\1\346\14\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\2\12\1\0\1\347"+
    "\21\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\2\12\1\0\11\12\1\350\10\12\33\0\5\12\1\0"+
    "\1\351\1\12\1\0\3\12\4\0\2\12\1\0\22\12"+
    "\33\0\5\12\1\0\1\352\1\12\1\0\3\12\4\0"+
    "\2\12\1\0\22\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\2\12\1\0\4\12\1\353\15\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\1\12\1\354"+
    "\1\0\22\12\36\0\1\76\1\0\1\100\3\0\2\101"+
    "\1\102\5\0\1\102\1\0\2\102\7\0\1\102\46\0"+
    "\1\355\1\356\1\0\2\261\1\0\3\102\5\0\1\102"+
    "\1\0\2\102\7\0\1\102\47\0\1\322\73\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\2\12\1\0\10\12"+
    "\1\357\11\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\0\15\12\1\360\4\12\33\0\5\361"+
    "\1\0\2\361\1\0\3\361\4\0\2\361\1\0\22\361"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\2\12"+
    "\1\0\6\12\1\362\13\12\33\0\1\363\4\12\1\0"+
    "\2\12\1\0\3\12\4\0\2\12\1\0\22\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\2\12\1\0"+
    "\4\12\1\364\15\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\2\12\1\0\11\12\1\365\10\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\2\12\1\0"+
    "\11\12\1\366\10\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\2\12\1\0\7\12\1\367\12\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\2\12\1\0"+
    "\11\12\1\370\10\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\2\12\1\0\10\12\1\371\11\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\1\12\1\372"+
    "\1\0\22\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\0\17\12\1\373\2\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\2\12\1\0\1\12"+
    "\1\374\20\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\0\7\12\1\375\12\12\37\0\1\376"+
    "\77\0\1\356\1\0\2\261\1\0\3\102\5\0\1\102"+
    "\1\0\2\102\7\0\1\102\43\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\2\12\1\0\10\12\1\377\11\12"+
    "\33\0\5\u0100\1\0\2\u0100\1\0\3\u0100\1\211\3\0"+
    "\2\u0100\1\0\22\u0100\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\2\12\1\0\21\12\1\u0101\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\2\12\1\0\2\12"+
    "\1\u0102\17\12\33\0\5\12\1\0\2\12\1\0\2\12"+
    "\1\u0103\4\0\2\12\1\0\22\12\33\0\5\12\1\0"+
    "\2\12\1\0\3\12\4\0\2\12\1\0\5\12\1\u0104"+
    "\14\12\33\0\1\u0105\4\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\0\22\12\33\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\2\12\1\0\4\12\1\u0106\15\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\2\12"+
    "\1\0\5\12\1\u0107\14\12\37\0\1\u0108\1\0\2\261"+
    "\1\0\3\102\5\0\1\102\1\0\2\102\7\0\1\102"+
    "\43\0\5\u0109\1\0\2\u0109\1\0\3\u0109\4\0\2\u0109"+
    "\1\0\22\u0109\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\0\11\12\1\u010a\10\12\33\0\5\12"+
    "\1\0\1\u010b\1\12\1\0\3\12\4\0\2\12\1\0"+
    "\22\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\2\12\1\0\4\12\1\u010c\15\12\33\0\5\12\1\0"+
    "\1\u010d\1\12\1\0\3\12\4\0\2\12\1\0\22\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\2\12"+
    "\1\0\21\12\1\u010e\33\0\5\12\1\0\1\u010f\1\12"+
    "\1\0\3\12\4\0\2\12\1\0\22\12\37\0\1\u0110"+
    "\1\0\2\261\1\0\3\102\5\0\1\102\1\0\2\102"+
    "\7\0\1\102\43\0\5\u0111\1\0\2\u0111\1\0\3\u0111"+
    "\4\0\2\u0111\1\0\22\u0111\33\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\2\12\1\0\10\12\1\u0112\11\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\2\12"+
    "\1\0\10\12\1\u0113\11\12\36\0\1\355\2\0\2\261"+
    "\1\0\3\102\5\0\1\102\1\0\2\102\7\0\1\102"+
    "\43\0\5\112\1\0\2\112\1\0\3\112\4\0\2\112"+
    "\1\0\22\112\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\33\1\2\11\1\1\4\11\1\1\1\11"+
    "\12\1\1\11\2\0\1\1\1\11\1\1\2\11\4\1"+
    "\1\0\1\1\1\0\2\11\1\1\1\11\2\1\3\11"+
    "\4\0\1\11\1\0\1\11\4\1\2\11\26\1\2\11"+
    "\1\1\1\11\2\1\12\11\1\1\1\11\3\1\1\0"+
    "\2\1\1\11\3\1\1\11\2\0\33\1\5\11\2\1"+
    "\1\0\2\1\1\0\3\1\1\0\35\1\1\0\2\1"+
    "\1\0\26\1\1\0\3\1\1\0\16\1\1\0\10\1"+
    "\1\0\7\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int commentDepth = 0;

    public void goTo(int offset) {
        zzCurrentPos = zzMarkedPos = zzStartRead = offset;
        zzPushbackPos = 0;
        zzAtEOF = offset < zzEndRead;
    }


  public _CeylonLexerM4(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _CeylonLexerM4(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2642) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 45: 
          { return CeylonTokenTypes.STRING_LITERAL;
          }
        case 106: break;
        case 66: 
          { if (--commentDepth == 0) {
            yybegin(YYINITIAL);
            return CeylonTokenTypes.MULTI_LINE_COMMENT;
        }
          }
        case 107: break;
        case 32: 
          { return CeylonTokenTypes.NOT_EQUAL_OPERATOR;
          }
        case 108: break;
        case 27: 
          { return CeylonTokenTypes.MODULO_OPERATOR;
          }
        case 109: break;
        case 80: 
          { return CeylonTokenTypes.CASE_KEYWORD;
          }
        case 110: break;
        case 55: 
          { return CeylonTokenTypes.UNION_ASSIGN_OPERATOR;
          }
        case 111: break;
        case 76: 
          { return CeylonTokenTypes.COMPARE_OPERATOR;
          }
        case 112: break;
        case 53: 
          { return CeylonTokenTypes.INTERSECTION_ASSIGN_OPERATOR;
          }
        case 113: break;
        case 9: 
          { return CeylonTokenTypes.MEMBER_OPERATOR;
          }
        case 114: break;
        case 90: 
          { return CeylonTokenTypes.WHILE_KEYWORD;
          }
        case 115: break;
        case 30: 
          { return CeylonTokenTypes.AMPERSAND_OPERATOR;
          }
        case 116: break;
        case 46: 
          { return CeylonTokenTypes.QUOTED_LITERAL;
          }
        case 117: break;
        case 60: 
          { return CeylonTokenTypes.ADD_ASSIGN_OPERATOR;
          }
        case 118: break;
        case 40: 
          { return CeylonTokenTypes.RANGE_OPERATOR;
          }
        case 119: break;
        case 19: 
          { return CeylonTokenTypes.LEFT_BRACKET_OPERATOR;
          }
        case 120: break;
        case 78: 
          { return CeylonTokenTypes.THIS_KEYWORD;
          }
        case 121: break;
        case 63: 
          { return CeylonTokenTypes.XOR_ASSIGN_OPERATOR;
          }
        case 122: break;
        case 62: 
          { return CeylonTokenTypes.MODULO_ASSIGN_OPERATOR;
          }
        case 123: break;
        case 44: 
          { return CeylonTokenTypes.ENTRY_OPERATOR;
          }
        case 124: break;
        case 37: 
          { return CeylonTokenTypes.IS_KEYWORD;
          }
        case 125: break;
        case 68: 
          { return CeylonTokenTypes.CHARACTER_LITERAL;
          }
        case 126: break;
        case 102: 
          { return CeylonTokenTypes.NONEMPTY_KEYWORD;
          }
        case 127: break;
        case 7: 
          { return CeylonTokenTypes.UPPERCASE_IDENTIFIER;
          }
        case 128: break;
        case 36: 
          { return CeylonTokenTypes.IF_KEYWORD;
          }
        case 129: break;
        case 100: 
          { return CeylonTokenTypes.FUNCTION_KEYWORD;
          }
        case 130: break;
        case 58: 
          { return CeylonTokenTypes.GREATER_THAN_OR_EQUAL_TO_OPERATOR;
          }
        case 131: break;
        case 28: 
          { return CeylonTokenTypes.XOR_OPERATOR;
          }
        case 132: break;
        case 105: 
          { return CeylonTokenTypes.SATISFIES_KEYWORD;
          }
        case 133: break;
        case 22: 
          { return CeylonTokenTypes.INTERSECTION_OPERATOR;
          }
        case 134: break;
        case 42: 
          { return CeylonTokenTypes.DECREMENT_OPERATOR;
          }
        case 135: break;
        case 3: 
          { return CeylonTokenTypes.HASH_OPERATOR;
          }
        case 136: break;
        case 15: 
          { return CeylonTokenTypes.LEFT_BRACE_OPERATOR;
          }
        case 137: break;
        case 31: 
          { return CeylonTokenTypes.SHELL_COMMENT;
          }
        case 138: break;
        case 96: 
          { return CeylonTokenTypes.ADAPTS_KEYWORD;
          }
        case 139: break;
        case 61: 
          { return CeylonTokenTypes.INCREMENT_OPERATOR;
          }
        case 140: break;
        case 29: 
          { return CeylonTokenTypes.COMPLEMENT_OPERATOR;
          }
        case 141: break;
        case 24: 
          { return CeylonTokenTypes.LESS_THAN_OPERATOR;
          }
        case 142: break;
        case 25: 
          { return CeylonTokenTypes.GREATER_THAN_OPERATOR;
          }
        case 143: break;
        case 56: 
          { return CeylonTokenTypes.OR_OPERATOR;
          }
        case 144: break;
        case 67: 
          { return CeylonTokenTypes.ELLIPSES_OPERATOR;
          }
        case 145: break;
        case 74: 
          { return CeylonTokenTypes.AND_ASSIGN_OPERATOR;
          }
        case 146: break;
        case 12: 
          { return CeylonTokenTypes.COMMA_OPERATOR;
          }
        case 147: break;
        case 21: 
          { return CeylonTokenTypes.DEFAULT_OPERATOR;
          }
        case 148: break;
        case 69: 
          { return CeylonTokenTypes.FOR_KEYWORD;
          }
        case 149: break;
        case 98: 
          { return CeylonTokenTypes.EXTENDS_KEYWORD;
          }
        case 150: break;
        case 94: 
          { return CeylonTokenTypes.RETURN_KEYWORD;
          }
        case 151: break;
        case 77: 
          { return CeylonTokenTypes.ELSE_KEYWORD;
          }
        case 152: break;
        case 35: 
          { return CeylonTokenTypes.DIVIDE_ASSIGN_OPERATOR;
          }
        case 153: break;
        case 86: 
          { return CeylonTokenTypes.CATCH_KEYWORD;
          }
        case 154: break;
        case 39: 
          { return CeylonTokenTypes.FLOAT_LITERAL;
          }
        case 155: break;
        case 38: 
          { return CeylonTokenTypes.IN_KEYWORD;
          }
        case 156: break;
        case 51: 
          { return CeylonTokenTypes.ARRAY_OPERATOR;
          }
        case 157: break;
        case 73: 
          { return CeylonTokenTypes.SPREAD_OPERATOR;
          }
        case 158: break;
        case 84: 
          { return CeylonTokenTypes.THROW_KEYWORD;
          }
        case 159: break;
        case 88: 
          { return CeylonTokenTypes.GIVEN_KEYWORD;
          }
        case 160: break;
        case 33: 
          { return CeylonTokenTypes.LINE_COMMENT;
          }
        case 161: break;
        case 20: 
          { return CeylonTokenTypes.RIGHT_BRACKET_OPERATOR;
          }
        case 162: break;
        case 5: 
          { return CeylonTokenTypes.DIVIDE_OPERATOR;
          }
        case 163: break;
        case 17: 
          { return CeylonTokenTypes.LEFT_PARENTHESIS_OPERATOR;
          }
        case 164: break;
        case 72: 
          { return CeylonTokenTypes.IDENTICAL_OPERATOR;
          }
        case 165: break;
        case 91: 
          { return CeylonTokenTypes.IMPORT_KEYWORD;
          }
        case 166: break;
        case 49: 
          { return CeylonTokenTypes.OF_KEYWORD;
          }
        case 167: break;
        case 16: 
          { return CeylonTokenTypes.RIGHT_BRACE_OPERATOR;
          }
        case 168: break;
        case 10: 
          { return CeylonTokenTypes.SUBTRACT_OPERATOR;
          }
        case 169: break;
        case 8: 
          { return CeylonTokenTypes.INTEGER_LITERAL;
          }
        case 170: break;
        case 75: 
          { return CeylonTokenTypes.OR_ASSIGN_OPERATOR;
          }
        case 171: break;
        case 85: 
          { return CeylonTokenTypes.CLASS_KEYWORD;
          }
        case 172: break;
        case 89: 
          { return CeylonTokenTypes.VALUE_KEYWORD;
          }
        case 173: break;
        case 71: 
          { return CeylonTokenTypes.TRY_KEYWORD;
          }
        case 174: break;
        case 26: 
          { return CeylonTokenTypes.ADD_OPERATOR;
          }
        case 175: break;
        case 48: 
          { return CeylonTokenTypes.MULTIPLY_ASSIGN_OPERATOR;
          }
        case 176: break;
        case 83: 
          { return CeylonTokenTypes.OUTER_KEYWORD;
          }
        case 177: break;
        case 2: 
          { return CeylonTokenTypes.WHITE_SPACE;
          }
        case 178: break;
        case 41: 
          { return CeylonTokenTypes.APPLY_OPERATOR;
          }
        case 179: break;
        case 64: 
          { return CeylonTokenTypes.COMPLEMENT_ASSIGN_OPERATOR;
          }
        case 180: break;
        case 23: 
          { return CeylonTokenTypes.UNION_OPERATOR;
          }
        case 181: break;
        case 95: 
          { return CeylonTokenTypes.ASSIGN_KEYWORD;
          }
        case 182: break;
        case 1: 
          { return CeylonTokenTypes.BAD_CHARACTER;
          }
        case 183: break;
        case 57: 
          { return CeylonTokenTypes.LESS_THAN_OR_EQUAL_TO_OPERATOR;
          }
        case 184: break;
        case 13: 
          { return CeylonTokenTypes.SEMICOLON_OPERATOR;
          }
        case 185: break;
        case 103: 
          { return CeylonTokenTypes.INTERFACE_KEYWORD;
          }
        case 186: break;
        case 93: 
          { return CeylonTokenTypes.OBJECT_KEYWORD;
          }
        case 187: break;
        case 81: 
          { return CeylonTokenTypes.VOID_KEYWORD;
          }
        case 188: break;
        case 104: 
          { return CeylonTokenTypes.ABSTRACTS_KEYWORD;
          }
        case 189: break;
        case 82: 
          { return CeylonTokenTypes.BREAK_KEYWORD;
          }
        case 190: break;
        case 43: 
          { return CeylonTokenTypes.SUBTRACT_ASSIGN_OPERATOR;
          }
        case 191: break;
        case 50: 
          { return CeylonTokenTypes.EQUAL_OPERATOR;
          }
        case 192: break;
        case 65: 
          { commentDepth++;
          }
        case 193: break;
        case 52: 
          { return CeylonTokenTypes.SAFE_MEMBER_OPERATOR;
          }
        case 194: break;
        case 34: 
          { yybegin(MULTI_LINE_COMMENT);
        commentDepth++;
          }
        case 195: break;
        case 97: 
          { return CeylonTokenTypes.SWITCH_KEYWORD;
          }
        case 196: break;
        case 11: 
          { return CeylonTokenTypes.MULTIPLY_OPERATOR;
          }
        case 197: break;
        case 4: 
          { return CeylonTokenTypes.NOT_OPERATOR;
          }
        case 198: break;
        case 92: 
          { return CeylonTokenTypes.EXISTS_KEYWORD;
          }
        case 199: break;
        case 14: 
          { return CeylonTokenTypes.SPECIFY_OPERATOR;
          }
        case 200: break;
        case 70: 
          { return CeylonTokenTypes.OUT_KEYWORD;
          }
        case 201: break;
        case 59: 
          { return CeylonTokenTypes.ASSIGN_OPERATOR;
          }
        case 202: break;
        case 18: 
          { return CeylonTokenTypes.RIGHT_PARENTHESIS_OPERATOR;
          }
        case 203: break;
        case 101: 
          { return CeylonTokenTypes.CONTINUE_KEYWORD;
          }
        case 204: break;
        case 99: 
          { return CeylonTokenTypes.FINALLY_KEYWORD;
          }
        case 205: break;
        case 87: 
          { return CeylonTokenTypes.SUPER_KEYWORD;
          }
        case 206: break;
        case 54: 
          { return CeylonTokenTypes.AND_OPERATOR;
          }
        case 207: break;
        case 47: 
          { return CeylonTokenTypes.POWER_OPERATOR;
          }
        case 208: break;
        case 6: 
          { return CeylonTokenTypes.LOWERCASE_IDENTIFIER;
          }
        case 209: break;
        case 79: 
          { return CeylonTokenTypes.THEN_KEYWORD;
          }
        case 210: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
