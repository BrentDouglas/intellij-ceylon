/* The following code was generated by JFlex 1.4.3 on 11/12/12 7:31 PM */

package io.machinecode.intellij.ceylon.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/12/12 7:31 PM from the specification file
 * <tt>/home/brent/work/intellij-ceylon/src/main/java/io/machinecode/intellij/ceylon/lang/lexer/ceylon_m1.jflex</tt>
 */
public class _CeylonLexerM1 implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTI_LINE_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\23\1\24\1\4\1\0\1\24\1\5\22\0\1\1\1\3"+
    "\1\25\1\2\1\0\1\76\1\70\1\26\1\63\1\64\1\32\1\75"+
    "\1\56\1\16\1\13\1\6\12\12\1\74\1\57\1\72\1\60\1\73"+
    "\1\67\1\101\4\11\1\15\1\11\1\20\5\11\1\20\2\11\1\20"+
    "\3\11\1\20\6\11\1\65\1\27\1\66\1\77\1\10\1\22\1\43"+
    "\1\30\1\41\1\51\1\14\1\31\1\47\1\53\1\33\1\46\1\17"+
    "\1\42\1\34\1\45\1\36\1\35\1\7\1\37\1\44\1\40\1\21"+
    "\1\50\1\54\1\52\1\55\1\7\1\61\1\71\1\62\1\100\53\0"+
    "\1\7\12\0\1\7\4\0\1\7\5\0\27\11\1\0\7\11\30\7"+
    "\1\0\10\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\2\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\2\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\2\11\1\7\1\11\1\7\1\11\3\7\2\11\1\7\1\11\1\7"+
    "\2\11\1\7\3\11\2\7\4\11\1\7\2\11\1\7\3\11\3\7"+
    "\2\11\1\7\2\11\1\7\1\11\1\7\1\11\1\7\2\11\1\7"+
    "\1\11\2\7\1\11\1\7\2\11\1\7\3\11\1\7\1\11\1\7"+
    "\2\11\2\7\1\0\1\11\3\7\4\0\1\11\1\0\1\7\1\11"+
    "\1\0\1\7\1\11\1\0\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\2\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\2\7\1\11"+
    "\1\0\1\7\1\11\1\7\3\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\7\7\2\11\1\7\2\11\2\7\1\11\1\7"+
    "\4\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\105\7"+
    "\1\0\44\7\7\0\2\7\36\0\5\7\140\0\1\7\52\0\1\11"+
    "\1\7\1\11\1\7\2\0\1\11\1\7\2\0\4\7\10\0\1\11"+
    "\1\0\3\11\1\0\1\11\1\0\2\11\1\7\21\11\1\0\11\11"+
    "\43\7\1\11\2\7\3\11\3\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\5\7\1\11"+
    "\1\7\1\0\1\11\1\7\2\11\2\7\63\11\60\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\10\0\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\2\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\2\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\11\0"+
    "\46\11\12\0\47\7\u0b18\0\46\11\u0c3a\0\300\7\100\0\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\11\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\11\7\10\11\6\7\2\0\6\11"+
    "\2\0\10\7\10\11\10\7\10\11\6\7\2\0\6\11\2\0\10\7"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\10\7\10\11"+
    "\16\7\2\0\10\7\10\0\10\7\10\0\10\7\10\0\5\7\1\0"+
    "\2\7\4\11\2\0\1\7\3\0\3\7\1\0\2\7\4\11\4\0"+
    "\4\7\2\0\2\7\4\11\4\0\10\7\5\11\5\0\3\7\1\0"+
    "\2\7\4\11\224\0\5\7\155\0\1\11\4\0\1\11\2\0\1\7"+
    "\3\11\2\7\3\11\1\7\1\0\1\11\3\0\5\11\6\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\4\11\1\0\1\7\4\11\1\7"+
    "\4\0\1\7\2\0\2\7\2\11\5\0\1\11\4\7\4\0\1\7"+
    "\21\0\20\11\20\7\3\0\1\11\1\7\u0331\0\32\11\32\7\u0716\0"+
    "\57\11\1\0\57\7\1\0\1\11\1\7\3\11\2\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\4\11\1\7\1\11\2\7\1\11\10\7"+
    "\3\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\2\7"+
    "\6\0\1\11\1\7\1\11\1\7\21\0\46\7\u791a\0\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\22\0\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\212\0"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\3\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\1\11\1\7\1\11\1\7\1\11\12\7\1\11\1\7\1\11\1\7"+
    "\2\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7"+
    "\3\0\1\11\1\7\1\11\1\7\1\0\1\11\1\7\16\0\1\11"+
    "\1\7\1\11\1\7\1\11\1\7\1\11\1\7\1\11\1\7\120\0"+
    "\1\7\u5305\0\7\7\14\0\5\7\u0409\0\32\11\6\0\32\7\245\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\7\1\10\1\13\2\14\1\15"+
    "\4\2\1\7\1\15\1\16\7\7\1\15\3\7\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\2\1\35\1\36"+
    "\1\37\1\40\1\41\2\0\1\42\1\43\1\44\1\45"+
    "\1\46\1\0\1\47\1\0\1\50\1\51\1\52\1\53"+
    "\1\54\1\0\2\7\1\54\1\55\1\56\1\57\3\0"+
    "\1\60\2\0\1\61\1\62\4\7\1\63\1\64\1\65"+
    "\1\7\1\66\1\67\2\7\1\70\21\7\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\2\42"+
    "\2\44\1\0\1\47\1\51\1\112\1\7\2\54\3\7"+
    "\1\10\1\54\1\113\1\60\3\7\1\114\2\7\1\115"+
    "\2\7\1\116\22\7\1\117\1\120\1\121\1\122\1\123"+
    "\2\0\1\47\1\51\1\0\1\7\1\54\1\0\1\54"+
    "\1\124\2\7\1\10\1\54\10\7\1\125\1\126\4\7"+
    "\1\127\10\7\1\130\2\7\1\47\1\131\2\51\1\0"+
    "\1\7\1\54\1\0\1\54\2\7\1\10\1\54\1\132"+
    "\4\7\1\133\2\7\1\134\1\7\1\135\1\136\3\7"+
    "\1\137\3\7\1\140\1\141\1\142\1\131\1\0\1\51"+
    "\1\0\1\51\1\54\1\0\1\54\1\143\1\7\1\54"+
    "\2\7\1\144\1\7\1\145\1\146\2\7\1\147\1\150"+
    "\1\7\1\151\1\7\1\47\1\51\1\0\1\51\1\54"+
    "\1\152\1\7\1\153\5\7\1\51\1\0\1\51\1\154"+
    "\1\7\1\155\2\7\1\156\2\51\1\157\1\160\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[309];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u01ce\0\u0210"+
    "\0\u01ce\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528"+
    "\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738"+
    "\0\u077a\0\u07bc\0\u07fe\0\204\0\204\0\u0840\0\204\0\204"+
    "\0\204\0\204\0\u0882\0\204\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\204\0\u0b58"+
    "\0\u0b9a\0\u0bdc\0\204\0\u0c1e\0\204\0\204\0\u0c60\0\u0ca2"+
    "\0\u0ce4\0\204\0\204\0\u0d26\0\204\0\u0d68\0\u0daa\0\u0dec"+
    "\0\u0e2e\0\u0e70\0\204\0\204\0\204\0\u0eb2\0\u0ef4\0\u03de"+
    "\0\204\0\u0f36\0\u0420\0\204\0\204\0\u0f78\0\u0fba\0\u0ffc"+
    "\0\u103e\0\204\0\204\0\u01ce\0\u1080\0\u01ce\0\u10c2\0\u1104"+
    "\0\u1146\0\u01ce\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2"+
    "\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2"+
    "\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\204\0\204\0\u166e"+
    "\0\204\0\u16b0\0\u16f2\0\204\0\204\0\204\0\204\0\204"+
    "\0\204\0\204\0\204\0\204\0\204\0\u1734\0\204\0\u1776"+
    "\0\u17b8\0\u17fa\0\u183c\0\204\0\u187e\0\u18c0\0\u1902\0\u1944"+
    "\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\204\0\u03de\0\u1a8e\0\u1ad0"+
    "\0\u1b12\0\u01ce\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u01ce"+
    "\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c"+
    "\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c"+
    "\0\u20be\0\u2100\0\204\0\204\0\204\0\204\0\204\0\u2142"+
    "\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352"+
    "\0\u01ce\0\u2394\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520"+
    "\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u01ce\0\u01ce\0\u26ac"+
    "\0\u26ee\0\u2730\0\u2772\0\u01ce\0\u27b4\0\u27f6\0\u2838\0\u287a"+
    "\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u01ce\0\u29c4\0\u2a06\0\u2a48"+
    "\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58"+
    "\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u01ce\0\u2da2\0\u2de4\0\u2e26"+
    "\0\u2e68\0\u01ce\0\u2eaa\0\u2eec\0\u01ce\0\u2f2e\0\u01ce\0\u01ce"+
    "\0\u2f70\0\u2fb2\0\u2ff4\0\u01ce\0\u3036\0\u3078\0\u30ba\0\u01ce"+
    "\0\u01ce\0\u01ce\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204\0\u3246"+
    "\0\u3288\0\u32ca\0\u01ce\0\u330c\0\u334e\0\u3390\0\u33d2\0\u01ce"+
    "\0\u3414\0\u01ce\0\u01ce\0\u3456\0\u3498\0\u01ce\0\u01ce\0\u34da"+
    "\0\u01ce\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u01ce"+
    "\0\u36a8\0\u01ce\0\u36ea\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u3834"+
    "\0\u3876\0\u38b8\0\u01ce\0\u38fa\0\u01ce\0\u393c\0\u397e\0\u01ce"+
    "\0\u39c0\0\u3a02\0\u01ce\0\u01ce\0\u01ce";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[309];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\2\4\1\7\2\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\3\1\4\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\2\21\1\32\1\33\1\34\1\35\1\10"+
    "\1\36\1\37\1\40\1\10\1\41\1\42\3\10\1\43"+
    "\1\10\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\6\0\1\70\23\0"+
    "\1\71\152\0\1\4\2\0\2\4\16\0\1\4\60\0"+
    "\1\72\156\0\1\73\27\0\1\74\23\0\1\75\25\0"+
    "\1\76\30\0\4\10\1\0\2\10\1\0\3\10\6\0"+
    "\2\10\1\0\23\10\33\0\4\11\1\0\2\11\1\0"+
    "\3\11\6\0\2\11\1\0\23\11\34\0\1\77\1\0"+
    "\1\100\1\101\3\0\2\102\1\103\7\0\1\103\2\0"+
    "\2\103\7\0\1\103\47\0\1\104\44\0\1\105\30\0"+
    "\3\10\1\106\1\0\2\10\1\107\3\10\6\0\2\10"+
    "\1\0\7\10\1\110\7\10\1\111\3\10\17\0\1\107"+
    "\13\0\3\11\1\112\1\0\2\11\1\107\3\11\6\0"+
    "\2\11\1\0\23\11\17\0\1\107\22\0\1\113\41\0"+
    "\1\114\12\0\1\115\6\0\4\116\2\0\14\116\3\0"+
    "\2\116\1\117\52\116\25\120\1\121\1\120\1\122\52\120"+
    "\26\123\1\124\53\123\22\0\1\125\2\0\5\125\5\0"+
    "\2\125\4\0\1\125\43\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\4\10\1\126\16\10\33\0"+
    "\4\10\1\0\2\10\1\0\2\10\1\127\6\0\2\10"+
    "\1\0\1\130\2\10\1\131\17\10\56\0\1\132\25\0"+
    "\1\133\30\0\4\10\1\0\2\10\1\0\3\10\6\0"+
    "\1\10\1\134\1\0\1\10\1\135\7\10\1\136\1\137"+
    "\10\10\33\0\4\10\1\0\2\10\1\0\2\10\1\140"+
    "\6\0\1\141\1\142\1\0\23\10\33\0\4\10\1\0"+
    "\1\143\1\10\1\0\3\10\6\0\2\10\1\0\23\10"+
    "\33\0\4\10\1\0\2\10\1\0\3\10\6\0\2\10"+
    "\1\0\4\10\1\144\13\10\1\145\2\10\33\0\4\10"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\3\10"+
    "\1\146\3\10\1\147\1\150\12\10\33\0\4\10\1\0"+
    "\2\10\1\0\3\10\6\0\1\151\1\10\1\0\11\10"+
    "\1\152\4\10\1\153\4\10\33\0\4\10\1\0\2\10"+
    "\1\0\2\10\1\154\6\0\2\10\1\0\10\10\1\155"+
    "\10\10\1\156\1\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\3\10\1\157\17\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\1\160\22\10\33\0\4\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\3\10\1\161\4\10\1\162\12\10"+
    "\33\0\4\10\1\0\2\10\1\0\3\10\6\0\2\10"+
    "\1\0\20\10\1\163\2\10\104\0\1\164\107\0\1\165"+
    "\26\0\1\166\146\0\1\167\7\0\1\170\71\0\1\171"+
    "\10\0\1\172\70\0\1\173\101\0\1\174\101\0\1\175"+
    "\101\0\1\176\14\0\1\177\64\0\1\200\101\0\1\201"+
    "\101\0\1\202\53\0\1\203\55\0\1\204\73\0\4\72"+
    "\1\205\1\206\74\72\4\74\1\207\1\210\74\74\12\0"+
    "\1\211\77\0\1\77\1\0\1\212\1\101\3\0\2\102"+
    "\1\103\7\0\1\103\2\0\2\103\7\0\1\103\46\0"+
    "\1\213\102\0\1\214\75\0\1\10\1\215\1\10\1\216"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\23\10"+
    "\36\0\1\217\76\0\4\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\11\10\1\220\11\10\33\0\4\10"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\1\221"+
    "\4\10\1\222\15\10\33\0\1\11\1\223\1\11\1\224"+
    "\1\0\2\11\1\0\3\11\6\0\2\11\1\0\23\11"+
    "\46\0\1\225\101\0\1\116\2\0\5\116\5\0\2\116"+
    "\4\0\1\116\34\0\25\120\1\226\1\120\1\122\52\120"+
    "\7\0\4\10\1\0\1\227\1\10\1\0\3\10\6\0"+
    "\2\10\1\0\23\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\12\10\1\230\10\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\12\10\1\231\10\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\4\10\1\232\16\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\2\10\1\233\20\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\5\10\1\234\15\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\5\10\1\235\15\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\13\10\1\236\7\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\5\10\1\237\15\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\22\10\1\240\33\0\4\10"+
    "\1\0\1\241\1\10\1\0\3\10\6\0\2\10\1\0"+
    "\1\242\3\10\1\243\16\10\33\0\4\10\1\0\2\10"+
    "\1\0\3\10\6\0\2\10\1\0\12\10\1\244\10\10"+
    "\33\0\4\10\1\0\2\10\1\0\3\10\6\0\2\10"+
    "\1\0\10\10\1\245\12\10\33\0\4\10\1\0\2\10"+
    "\1\0\3\10\6\0\2\10\1\0\5\10\1\246\3\10"+
    "\1\247\11\10\33\0\4\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\11\10\1\250\11\10\33\0\4\10"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\11\10"+
    "\1\251\11\10\33\0\4\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\10\10\1\252\12\10\33\0\4\10"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\2\10"+
    "\1\253\20\10\33\0\4\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\5\10\1\254\15\10\33\0\4\10"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\1\255"+
    "\22\10\33\0\4\10\1\0\2\10\1\0\3\10\6\0"+
    "\2\10\1\0\12\10\1\256\10\10\33\0\4\10\1\0"+
    "\2\10\1\0\3\10\6\0\2\10\1\0\15\10\1\257"+
    "\5\10\33\0\4\10\1\0\2\10\1\0\3\10\6\0"+
    "\2\10\1\0\1\260\22\10\33\0\4\10\1\0\2\10"+
    "\1\0\3\10\6\0\2\10\1\0\7\10\1\261\13\10"+
    "\33\0\4\10\1\0\2\10\1\0\3\10\6\0\2\10"+
    "\1\0\1\262\22\10\104\0\1\263\34\0\1\264\146\0"+
    "\1\265\101\0\1\266\114\0\1\267\12\0\1\205\101\0"+
    "\1\207\107\0\1\270\77\0\1\271\1\0\1\272\1\101"+
    "\3\0\2\102\1\103\7\0\1\103\2\0\2\103\7\0"+
    "\1\103\46\0\1\273\1\0\2\274\1\0\3\103\7\0"+
    "\1\103\2\0\2\103\7\0\1\103\43\0\3\10\1\275"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\23\10"+
    "\33\0\1\10\1\215\1\10\1\276\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\23\10\34\0\1\277\1\0"+
    "\1\300\76\0\4\10\1\0\1\301\1\10\1\0\3\10"+
    "\6\0\2\10\1\0\23\10\33\0\4\10\1\0\2\10"+
    "\1\0\3\10\6\0\2\10\1\0\11\10\1\302\11\10"+
    "\33\0\4\10\1\0\1\303\1\10\1\0\3\10\6\0"+
    "\2\10\1\0\23\10\33\0\3\11\1\304\1\0\2\11"+
    "\1\0\3\11\6\0\2\11\1\0\23\11\33\0\1\11"+
    "\1\223\1\11\1\305\1\0\2\11\1\0\3\11\6\0"+
    "\2\11\1\0\23\11\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\10\10\1\306\12\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\6\10\1\307\14\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\10\10\1\310\12\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\3\10\1\311\17\10\33\0\4\10\1\0\1\312\1\10"+
    "\1\0\3\10\6\0\2\10\1\0\23\10\33\0\4\10"+
    "\1\0\1\313\1\10\1\0\3\10\6\0\2\10\1\0"+
    "\23\10\33\0\4\10\1\0\1\314\1\10\1\0\3\10"+
    "\6\0\2\10\1\0\23\10\33\0\4\10\1\0\2\10"+
    "\1\0\2\10\1\315\6\0\2\10\1\0\23\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\12\10\1\316\10\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\11\10\1\317\11\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\3\10\1\320\17\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\5\10\1\321\15\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\11\10\1\322\11\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\6\10\1\323\14\10\33\0"+
    "\4\10\1\0\1\324\1\10\1\0\3\10\6\0\2\10"+
    "\1\0\23\10\33\0\4\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\5\10\1\325\15\10\33\0\4\10"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\1\326"+
    "\22\10\33\0\4\10\1\0\2\10\1\0\3\10\6\0"+
    "\2\10\1\0\2\10\1\327\20\10\33\0\4\10\1\0"+
    "\1\330\1\10\1\0\3\10\6\0\2\10\1\0\23\10"+
    "\33\0\4\10\1\0\2\10\1\0\3\10\6\0\2\10"+
    "\1\0\1\331\22\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\5\10\1\332\15\10\33\0"+
    "\4\10\1\0\1\333\1\10\1\0\3\10\6\0\2\10"+
    "\1\0\23\10\33\0\4\10\1\0\1\334\1\10\1\0"+
    "\3\10\6\0\2\10\1\0\23\10\33\0\4\10\1\0"+
    "\2\10\1\0\3\10\6\0\2\10\1\0\16\10\1\335"+
    "\4\10\33\0\4\10\1\0\2\10\1\0\2\10\1\336"+
    "\6\0\2\10\1\0\23\10\33\0\4\10\1\0\2\10"+
    "\1\0\3\10\6\0\2\10\1\0\7\10\1\337\13\10"+
    "\36\0\1\340\101\0\1\341\101\0\1\272\1\101\3\0"+
    "\2\102\1\103\7\0\1\103\2\0\2\103\7\0\1\103"+
    "\46\0\1\342\1\0\2\274\1\0\3\103\7\0\1\103"+
    "\2\0\2\103\7\0\1\103\46\0\1\343\3\0\1\344"+
    "\56\0\1\344\13\0\3\10\1\345\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\23\10\33\0\1\10\1\215"+
    "\1\10\1\346\1\0\2\10\1\0\3\10\6\0\2\10"+
    "\1\0\23\10\36\0\1\347\77\0\1\277\1\0\1\350"+
    "\76\0\4\10\1\0\2\10\1\0\3\10\6\0\2\10"+
    "\1\0\5\10\1\351\15\10\33\0\4\10\1\0\2\10"+
    "\1\0\3\10\6\0\2\10\1\0\12\10\1\352\10\10"+
    "\33\0\3\11\1\353\1\0\2\11\1\0\3\11\6\0"+
    "\2\11\1\0\23\11\33\0\1\11\1\223\1\11\1\354"+
    "\1\0\2\11\1\0\3\11\6\0\2\11\1\0\23\11"+
    "\33\0\4\10\1\0\2\10\1\0\1\355\2\10\6\0"+
    "\2\10\1\0\23\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\5\10\1\356\15\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\7\10\1\357\13\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\4\10\1\360\16\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\4\10\1\361\16\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\4\10\1\362\16\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\6\10\1\363\14\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\4\10\1\364\16\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\21\10\1\365\1\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\1\366\22\10\33\0\4\10"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\11\10"+
    "\1\367\11\10\33\0\4\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\20\10\1\370\2\10\33\0\4\10"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\4\10"+
    "\1\371\16\10\33\0\4\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\14\10\1\372\6\10\33\0\4\10"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\5\10"+
    "\1\373\15\10\33\0\4\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\4\10\1\374\16\10\33\0\4\10"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\11\10"+
    "\1\375\11\10\33\0\4\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\6\10\1\376\14\10\33\0\4\10"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\1\10"+
    "\1\377\21\10\33\0\4\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\12\10\1\u0100\10\10\33\0\4\10"+
    "\1\0\1\u0101\1\10\1\0\3\10\6\0\2\10\1\0"+
    "\23\10\33\0\4\10\1\0\1\u0102\1\10\1\0\3\10"+
    "\6\0\2\10\1\0\23\10\34\0\1\77\2\0\1\101"+
    "\3\0\2\102\1\103\7\0\1\103\2\0\2\103\7\0"+
    "\1\103\46\0\1\u0103\77\0\1\u0104\1\0\1\u0105\1\0"+
    "\2\274\1\0\3\103\7\0\1\103\2\0\2\103\7\0"+
    "\1\103\44\0\1\u0106\1\0\1\u0107\101\0\1\343\76\0"+
    "\3\10\1\u0108\1\0\2\10\1\0\3\10\6\0\2\10"+
    "\1\0\23\10\33\0\3\10\1\346\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\23\10\36\0\1\u0109\77\0"+
    "\1\277\1\0\1\u010a\76\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\11\10\1\u010b\11\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\16\10\1\u010c\4\10\33\0\3\11\1\u010d\1\0\2\11"+
    "\1\0\3\11\6\0\2\11\1\0\23\11\33\0\3\11"+
    "\1\354\1\0\2\11\1\0\3\11\6\0\2\11\1\0"+
    "\23\11\33\0\4\10\1\0\2\10\1\0\3\10\6\0"+
    "\2\10\1\0\1\u010e\22\10\33\0\4\10\1\0\2\10"+
    "\1\0\3\10\6\0\2\10\1\0\7\10\1\u010f\13\10"+
    "\33\0\4\10\1\0\2\10\1\0\3\10\6\0\2\10"+
    "\1\0\5\10\1\u0110\15\10\33\0\4\10\1\0\2\10"+
    "\1\0\3\10\6\0\1\10\1\u0111\1\0\23\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\5\10\1\u0112\15\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\12\10\1\u0113\10\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\12\10\1\u0114\10\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\10\10\1\u0115\12\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\12\10\1\u0116\10\10\33\0\4\10\1\0\2\10\1\0"+
    "\3\10\6\0\2\10\1\0\11\10\1\u0117\11\10\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\1\10\1\u0118"+
    "\1\0\23\10\33\0\4\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\20\10\1\u0119\2\10\33\0\4\10"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\2\10"+
    "\1\u011a\20\10\36\0\1\u011b\101\0\1\u011c\101\0\1\u0105"+
    "\1\0\2\274\1\0\3\103\7\0\1\103\2\0\2\103"+
    "\7\0\1\103\46\0\1\u011d\77\0\1\u0106\1\0\1\u011e"+
    "\76\0\1\10\1\215\2\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\23\10\36\0\1\u011f\101\0\1\u010a"+
    "\76\0\4\10\1\0\2\10\1\0\3\10\6\0\2\10"+
    "\1\0\11\10\1\u0120\11\10\33\0\1\11\1\223\2\11"+
    "\1\0\2\11\1\0\3\11\6\0\2\11\1\0\23\11"+
    "\33\0\4\10\1\0\2\10\1\0\3\10\6\0\2\10"+
    "\1\0\3\10\1\u0121\17\10\33\0\4\10\1\0\2\10"+
    "\1\0\3\10\6\0\2\10\1\0\22\10\1\u0122\33\0"+
    "\4\10\1\0\2\10\1\0\3\10\6\0\2\10\1\0"+
    "\10\10\1\u0123\12\10\33\0\4\10\1\0\2\10\1\0"+
    "\2\10\1\u0124\6\0\2\10\1\0\23\10\33\0\4\10"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\6\10"+
    "\1\u0125\14\10\33\0\4\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\1\u0126\22\10\33\0\4\10\1\0"+
    "\2\10\1\0\3\10\6\0\2\10\1\0\5\10\1\u0127"+
    "\15\10\34\0\1\271\2\0\1\101\3\0\2\102\1\103"+
    "\7\0\1\103\2\0\2\103\7\0\1\103\46\0\1\u0128"+
    "\1\0\2\274\1\0\3\103\7\0\1\103\2\0\2\103"+
    "\7\0\1\103\46\0\1\u0129\77\0\1\u0106\1\0\1\u012a"+
    "\77\0\1\277\100\0\4\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\12\10\1\u012b\10\10\33\0\4\10"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\6\10"+
    "\1\u012c\14\10\33\0\4\10\1\0\1\u012d\1\10\1\0"+
    "\3\10\6\0\2\10\1\0\23\10\33\0\4\10\1\0"+
    "\2\10\1\0\3\10\6\0\2\10\1\0\5\10\1\u012e"+
    "\15\10\33\0\4\10\1\0\1\u012f\1\10\1\0\3\10"+
    "\6\0\2\10\1\0\23\10\33\0\4\10\1\0\2\10"+
    "\1\0\3\10\6\0\2\10\1\0\22\10\1\u0130\36\0"+
    "\1\u0131\1\0\2\274\1\0\3\103\7\0\1\103\2\0"+
    "\2\103\7\0\1\103\46\0\1\u0132\101\0\1\u012a\76\0"+
    "\4\10\1\0\1\u0133\1\10\1\0\3\10\6\0\2\10"+
    "\1\0\23\10\33\0\4\10\1\0\2\10\1\0\3\10"+
    "\6\0\2\10\1\0\11\10\1\u0134\11\10\33\0\4\10"+
    "\1\0\2\10\1\0\3\10\6\0\2\10\1\0\11\10"+
    "\1\u0135\11\10\34\0\1\u0104\3\0\2\274\1\0\3\103"+
    "\7\0\1\103\2\0\2\103\7\0\1\103\44\0\1\u0106"+
    "\71\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14916];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\40\1\2\11\1\1\4\11\1\1"+
    "\1\11\12\1\1\11\2\0\1\1\1\11\1\1\2\11"+
    "\1\0\1\1\1\0\2\11\1\1\1\11\1\1\1\0"+
    "\3\1\3\11\3\0\1\11\2\0\2\11\4\1\2\11"+
    "\32\1\2\11\1\1\1\11\2\1\12\11\1\1\1\11"+
    "\1\1\1\0\2\1\1\11\10\1\1\11\35\1\5\11"+
    "\2\0\2\1\1\0\2\1\1\0\44\1\1\0\2\1"+
    "\1\0\34\1\1\0\1\1\1\0\2\1\1\0\23\1"+
    "\1\0\13\1\1\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[309];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int commentDepth = 0;

    public void goTo(int offset) {
        zzCurrentPos = zzMarkedPos = zzStartRead = offset;
        zzPushbackPos = 0;
        zzAtEOF = offset < zzEndRead;
    }


  public _CeylonLexerM1(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _CeylonLexerM1(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2640) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { return CeylonTokenTypes.STRING_LITERAL;
          }
        case 114: break;
        case 73: 
          { if (--commentDepth == 0) {
            yybegin(YYINITIAL);
            return CeylonTokenTypes.MULTI_LINE_COMMENT;
        }
          }
        case 115: break;
        case 35: 
          { return CeylonTokenTypes.NOT_EQUAL_OPERATOR;
          }
        case 116: break;
        case 30: 
          { return CeylonTokenTypes.MODULO_OPERATOR;
          }
        case 117: break;
        case 87: 
          { return CeylonTokenTypes.CASE_KEYWORD;
          }
        case 118: break;
        case 62: 
          { return CeylonTokenTypes.UNION_ASSIGN_OPERATOR;
          }
        case 119: break;
        case 83: 
          { return CeylonTokenTypes.COMPARE_OPERATOR;
          }
        case 120: break;
        case 60: 
          { return CeylonTokenTypes.INTERSECTION_ASSIGN_OPERATOR;
          }
        case 121: break;
        case 10: 
          { return CeylonTokenTypes.MEMBER_OPERATOR;
          }
        case 122: break;
        case 98: 
          { return CeylonTokenTypes.WHILE_KEYWORD;
          }
        case 123: break;
        case 33: 
          { return CeylonTokenTypes.AMPERSAND_OPERATOR;
          }
        case 124: break;
        case 49: 
          { return CeylonTokenTypes.QUOTED_LITERAL;
          }
        case 125: break;
        case 67: 
          { return CeylonTokenTypes.ADD_ASSIGN_OPERATOR;
          }
        case 126: break;
        case 42: 
          { return CeylonTokenTypes.RANGE_OPERATOR;
          }
        case 127: break;
        case 22: 
          { return CeylonTokenTypes.LEFT_BRACKET_OPERATOR;
          }
        case 128: break;
        case 86: 
          { return CeylonTokenTypes.THIS_KEYWORD;
          }
        case 129: break;
        case 70: 
          { return CeylonTokenTypes.XOR_ASSIGN_OPERATOR;
          }
        case 130: break;
        case 69: 
          { return CeylonTokenTypes.MODULO_ASSIGN_OPERATOR;
          }
        case 131: break;
        case 47: 
          { return CeylonTokenTypes.ENTRY_OPERATOR;
          }
        case 132: break;
        case 54: 
          { return CeylonTokenTypes.IS_KEYWORD;
          }
        case 133: break;
        case 75: 
          { return CeylonTokenTypes.CHARACTER_LITERAL;
          }
        case 134: break;
        case 110: 
          { return CeylonTokenTypes.NONEMPTY_KEYWORD;
          }
        case 135: break;
        case 8: 
          { return CeylonTokenTypes.UPPERCASE_IDENTIFIER;
          }
        case 136: break;
        case 53: 
          { return CeylonTokenTypes.IF_KEYWORD;
          }
        case 137: break;
        case 108: 
          { return CeylonTokenTypes.FUNCTION_KEYWORD;
          }
        case 138: break;
        case 65: 
          { return CeylonTokenTypes.GREATER_THAN_OR_EQUAL_TO_OPERATOR;
          }
        case 139: break;
        case 31: 
          { return CeylonTokenTypes.XOR_OPERATOR;
          }
        case 140: break;
        case 113: 
          { return CeylonTokenTypes.SATISFIES_KEYWORD;
          }
        case 141: break;
        case 25: 
          { return CeylonTokenTypes.INTERSECTION_OPERATOR;
          }
        case 142: break;
        case 45: 
          { return CeylonTokenTypes.DECREMENT_OPERATOR;
          }
        case 143: break;
        case 4: 
          { return CeylonTokenTypes.HASH_OPERATOR;
          }
        case 144: break;
        case 18: 
          { return CeylonTokenTypes.LEFT_BRACE_OPERATOR;
          }
        case 145: break;
        case 9: 
          { return CeylonTokenTypes.DIGIT;
          }
        case 146: break;
        case 34: 
          { return CeylonTokenTypes.SHELL_COMMENT;
          }
        case 147: break;
        case 104: 
          { return CeylonTokenTypes.ADAPTS_KEYWORD;
          }
        case 148: break;
        case 68: 
          { return CeylonTokenTypes.INCREMENT_OPERATOR;
          }
        case 149: break;
        case 32: 
          { return CeylonTokenTypes.COMPLEMENT_OPERATOR;
          }
        case 150: break;
        case 27: 
          { return CeylonTokenTypes.LESS_THAN_OPERATOR;
          }
        case 151: break;
        case 28: 
          { return CeylonTokenTypes.GREATER_THAN_OPERATOR;
          }
        case 152: break;
        case 63: 
          { return CeylonTokenTypes.OR_OPERATOR;
          }
        case 153: break;
        case 74: 
          { return CeylonTokenTypes.ELLIPSES_OPERATOR;
          }
        case 154: break;
        case 81: 
          { return CeylonTokenTypes.AND_ASSIGN_OPERATOR;
          }
        case 155: break;
        case 15: 
          { return CeylonTokenTypes.COMMA_OPERATOR;
          }
        case 156: break;
        case 24: 
          { return CeylonTokenTypes.DEFAULT_OPERATOR;
          }
        case 157: break;
        case 76: 
          { return CeylonTokenTypes.FOR_KEYWORD;
          }
        case 158: break;
        case 106: 
          { return CeylonTokenTypes.EXTENDS_KEYWORD;
          }
        case 159: break;
        case 102: 
          { return CeylonTokenTypes.RETURN_KEYWORD;
          }
        case 160: break;
        case 84: 
          { return CeylonTokenTypes.ELSE_KEYWORD;
          }
        case 161: break;
        case 38: 
          { return CeylonTokenTypes.DIVIDE_ASSIGN_OPERATOR;
          }
        case 162: break;
        case 94: 
          { return CeylonTokenTypes.CATCH_KEYWORD;
          }
        case 163: break;
        case 41: 
          { return CeylonTokenTypes.FLOAT_LITERAL;
          }
        case 164: break;
        case 55: 
          { return CeylonTokenTypes.IN_KEYWORD;
          }
        case 165: break;
        case 58: 
          { return CeylonTokenTypes.ARRAY_OPERATOR;
          }
        case 166: break;
        case 80: 
          { return CeylonTokenTypes.SPREAD_OPERATOR;
          }
        case 167: break;
        case 92: 
          { return CeylonTokenTypes.THROW_KEYWORD;
          }
        case 168: break;
        case 96: 
          { return CeylonTokenTypes.GIVEN_KEYWORD;
          }
        case 169: break;
        case 36: 
          { return CeylonTokenTypes.LINE_COMMENT;
          }
        case 170: break;
        case 23: 
          { return CeylonTokenTypes.RIGHT_BRACKET_OPERATOR;
          }
        case 171: break;
        case 6: 
          { return CeylonTokenTypes.DIVIDE_OPERATOR;
          }
        case 172: break;
        case 44: 
          { return CeylonTokenTypes.EXPONENT;
          }
        case 173: break;
        case 20: 
          { return CeylonTokenTypes.LEFT_PARENTHESIS_OPERATOR;
          }
        case 174: break;
        case 79: 
          { return CeylonTokenTypes.IDENTICAL_OPERATOR;
          }
        case 175: break;
        case 100: 
          { return CeylonTokenTypes.IMPORT_KEYWORD;
          }
        case 176: break;
        case 56: 
          { return CeylonTokenTypes.OF_KEYWORD;
          }
        case 177: break;
        case 19: 
          { return CeylonTokenTypes.RIGHT_BRACE_OPERATOR;
          }
        case 178: break;
        case 39: 
          { return CeylonTokenTypes.DIGITS;
          }
        case 179: break;
        case 11: 
          { return CeylonTokenTypes.SUBTRACT_OPERATOR;
          }
        case 180: break;
        case 40: 
          { return CeylonTokenTypes.INTEGER_LITERAL;
          }
        case 181: break;
        case 82: 
          { return CeylonTokenTypes.OR_ASSIGN_OPERATOR;
          }
        case 182: break;
        case 93: 
          { return CeylonTokenTypes.CLASS_KEYWORD;
          }
        case 183: break;
        case 1: 
          { return CeylonTokenTypes.PACKAGE_IDENTIFIER;
          }
        case 184: break;
        case 97: 
          { return CeylonTokenTypes.VALUE_KEYWORD;
          }
        case 185: break;
        case 78: 
          { return CeylonTokenTypes.TRY_KEYWORD;
          }
        case 186: break;
        case 29: 
          { return CeylonTokenTypes.ADD_OPERATOR;
          }
        case 187: break;
        case 52: 
          { return CeylonTokenTypes.MULTIPLY_ASSIGN_OPERATOR;
          }
        case 188: break;
        case 91: 
          { return CeylonTokenTypes.OUTER_KEYWORD;
          }
        case 189: break;
        case 3: 
          { return CeylonTokenTypes.WHITE_SPACE;
          }
        case 190: break;
        case 43: 
          { return CeylonTokenTypes.APPLY_OPERATOR;
          }
        case 191: break;
        case 71: 
          { return CeylonTokenTypes.COMPLEMENT_ASSIGN_OPERATOR;
          }
        case 192: break;
        case 26: 
          { return CeylonTokenTypes.UNION_OPERATOR;
          }
        case 193: break;
        case 103: 
          { return CeylonTokenTypes.ASSIGN_KEYWORD;
          }
        case 194: break;
        case 89: 
          { return CeylonTokenTypes.FRACTIONAL_DIGITS;
          }
        case 195: break;
        case 2: 
          { return CeylonTokenTypes.BAD_CHARACTER;
          }
        case 196: break;
        case 64: 
          { return CeylonTokenTypes.LESS_THAN_OR_EQUAL_TO_OPERATOR;
          }
        case 197: break;
        case 16: 
          { return CeylonTokenTypes.SEMICOLON_OPERATOR;
          }
        case 198: break;
        case 111: 
          { return CeylonTokenTypes.INTERFACE_KEYWORD;
          }
        case 199: break;
        case 101: 
          { return CeylonTokenTypes.OBJECT_KEYWORD;
          }
        case 200: break;
        case 88: 
          { return CeylonTokenTypes.VOID_KEYWORD;
          }
        case 201: break;
        case 112: 
          { return CeylonTokenTypes.ABSTRACTS_KEYWORD;
          }
        case 202: break;
        case 90: 
          { return CeylonTokenTypes.BREAK_KEYWORD;
          }
        case 203: break;
        case 46: 
          { return CeylonTokenTypes.SUBTRACT_ASSIGN_OPERATOR;
          }
        case 204: break;
        case 12: 
          { return CeylonTokenTypes.MAGNITUDE;
          }
        case 205: break;
        case 57: 
          { return CeylonTokenTypes.EQUAL_OPERATOR;
          }
        case 206: break;
        case 72: 
          { commentDepth++;
          }
        case 207: break;
        case 59: 
          { return CeylonTokenTypes.SAFE_MEMBER_OPERATOR;
          }
        case 208: break;
        case 37: 
          { yybegin(MULTI_LINE_COMMENT);
        commentDepth++;
          }
        case 209: break;
        case 105: 
          { return CeylonTokenTypes.SWITCH_KEYWORD;
          }
        case 210: break;
        case 14: 
          { return CeylonTokenTypes.MULTIPLY_OPERATOR;
          }
        case 211: break;
        case 5: 
          { return CeylonTokenTypes.NOT_OPERATOR;
          }
        case 212: break;
        case 13: 
          { return CeylonTokenTypes.FRACTIONAL_MAGNITUDE;
          }
        case 213: break;
        case 99: 
          { return CeylonTokenTypes.EXISTS_KEYWORD;
          }
        case 214: break;
        case 77: 
          { return CeylonTokenTypes.OUT_KEYWORD;
          }
        case 215: break;
        case 17: 
          { return CeylonTokenTypes.SPECIFY_OPERATOR;
          }
        case 216: break;
        case 66: 
          { return CeylonTokenTypes.ASSIGN_OPERATOR;
          }
        case 217: break;
        case 21: 
          { return CeylonTokenTypes.RIGHT_PARENTHESIS_OPERATOR;
          }
        case 218: break;
        case 109: 
          { return CeylonTokenTypes.CONTINUE_KEYWORD;
          }
        case 219: break;
        case 107: 
          { return CeylonTokenTypes.FINALLY_KEYWORD;
          }
        case 220: break;
        case 95: 
          { return CeylonTokenTypes.SUPER_KEYWORD;
          }
        case 221: break;
        case 61: 
          { return CeylonTokenTypes.AND_OPERATOR;
          }
        case 222: break;
        case 50: 
          { return CeylonTokenTypes.ESCAPE_SEQUENCE;
          }
        case 223: break;
        case 51: 
          { return CeylonTokenTypes.POWER_OPERATOR;
          }
        case 224: break;
        case 7: 
          { return CeylonTokenTypes.LOWERCASE_IDENTIFIER;
          }
        case 225: break;
        case 85: 
          { return CeylonTokenTypes.THEN_KEYWORD;
          }
        case 226: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
