/* The following code was generated by JFlex 1.4.3 on 11/11/12 8:57 PM */

package io.machinecode.intellij.ceylon.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/11/12 8:57 PM from the specification file
 * <tt>/home/brent/work/intellij-ceylon/src/main/java/io/machinecode/intellij/ceylon/lang/lexer/ceylon_m2.jflex</tt>
 */
public class _CeylonLexerM2 implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTI_LINE_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int[] ZZ_LEXSTATE = {
     0,  0,  1, 1
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\1\1\4\1\0\1\1\1\5\22\0\1\1\1\3\1\25"+
    "\1\2\1\0\1\70\1\72\1\26\1\61\1\62\1\33\1\67\1\55"+
    "\1\17\1\14\1\6\12\13\1\77\1\56\1\76\1\66\1\71\1\65"+
    "\1\100\4\10\1\16\1\10\1\21\1\10\1\10\3\10\1\21\2\10"+
    "\1\21\3\10\1\21\1\32\5\10\1\63\1\24\1\64\1\75\1\12"+
    "\1\23\1\42\1\27\1\40\1\50\1\15\1\30\1\46\1\52\1\7"+
    "\1\45\1\20\1\41\1\34\1\44\1\35\1\22\1\11\1\36\1\43"+
    "\1\37\1\31\1\47\1\53\1\51\1\54\1\11\1\57\1\73\1\60"+
    "\1\74\53\0\1\11\12\0\1\11\4\0\1\11\5\0\27\10\1\0"+
    "\7\10\30\11\1\0\10\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\2\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\2\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\2\10\1\11\1\10\1\11\1\10\3\11\2\10\1\11"+
    "\1\10\1\11\2\10\1\11\3\10\2\11\4\10\1\11\2\10\1\11"+
    "\3\10\3\11\2\10\1\11\2\10\1\11\1\10\1\11\1\10\1\11"+
    "\2\10\1\11\1\10\2\11\1\10\1\11\2\10\1\11\3\10\1\11"+
    "\1\10\1\11\2\10\2\11\1\0\1\10\3\11\4\0\1\10\1\0"+
    "\1\11\1\10\1\0\1\11\1\10\1\0\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\2\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\2\11\1\10\1\0\1\11\1\10\1\11\3\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\7\11\2\10\1\11\2\10\2\11"+
    "\1\10\1\11\4\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\105\11\1\0\44\11\7\0\2\11\36\0\5\11\140\0\1\11"+
    "\52\0\1\10\1\11\1\10\1\11\2\0\1\10\1\11\2\0\4\11"+
    "\10\0\1\10\1\0\3\10\1\0\1\10\1\0\2\10\1\11\21\10"+
    "\1\0\11\10\43\11\1\10\2\11\3\10\3\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\5\11\1\10\1\11\1\0\1\10\1\11\2\10\2\11\63\10\60\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\10\0\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\2\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\2\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\11\0\46\10\12\0\47\11\u0b18\0\46\10\u0c3a\0\300\11\100\0"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\11\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\11\11\10\10\6\11"+
    "\2\0\6\10\2\0\10\11\10\10\10\11\10\10\6\11\2\0\6\10"+
    "\2\0\10\11\1\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\10\11\10\10\16\11\2\0\10\11\10\0\10\11\10\0\10\11\10\0"+
    "\5\11\1\0\2\11\4\10\2\0\1\11\3\0\3\11\1\0\2\11"+
    "\4\10\4\0\4\11\2\0\2\11\4\10\4\0\10\11\5\10\5\0"+
    "\3\11\1\0\2\11\4\10\224\0\5\11\155\0\1\10\4\0\1\10"+
    "\2\0\1\11\3\10\2\11\3\10\1\11\1\0\1\10\3\0\5\10"+
    "\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0\1\11"+
    "\4\10\1\11\4\0\1\11\2\0\2\11\2\10\5\0\1\10\4\11"+
    "\4\0\1\11\21\0\20\10\20\11\3\0\1\10\1\11\u0331\0\32\10"+
    "\32\11\u0716\0\57\10\1\0\57\11\1\0\1\10\1\11\3\10\2\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\4\10\1\11\1\10\2\11"+
    "\1\10\10\11\3\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\2\11\6\0\1\10\1\11\1\10\1\11\21\0\46\11\u791a\0"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\22\0\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\212\0\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\3\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\1\10\1\11\1\10\1\11\1\10\12\11\1\10\1\11"+
    "\1\10\1\11\2\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11"+
    "\1\10\1\11\3\0\1\10\1\11\1\10\1\11\1\0\1\10\1\11"+
    "\16\0\1\10\1\11\1\10\1\11\1\10\1\11\1\10\1\11\1\10"+
    "\1\11\120\0\1\11\u5305\0\7\11\14\0\5\11\u0409\0\32\10\6\0"+
    "\32\11\245\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\6\1\10\1\11\1\6\1\7\1\12\2\13\1\14"+
    "\4\1\1\6\1\14\1\15\6\6\1\14\3\6\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\1\1\40\2\0\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\6\1\47\1\50\1\0\1\51\1\0"+
    "\1\52\1\53\1\54\1\55\1\56\1\0\2\6\1\56"+
    "\1\57\1\60\1\61\2\0\1\62\4\0\1\63\1\0"+
    "\1\64\4\6\1\65\1\66\1\6\1\67\22\6\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\2\41\2\43\2\6\1\0\1\51\1\53\1\111\1\6"+
    "\2\56\3\6\1\7\1\56\1\112\4\0\1\63\3\6"+
    "\1\113\1\6\1\114\1\6\1\115\22\6\1\116\1\117"+
    "\1\120\1\121\1\122\2\6\2\0\1\51\1\53\1\0"+
    "\1\6\1\56\1\0\1\56\1\123\2\6\1\7\1\56"+
    "\4\0\6\6\1\124\1\125\4\6\1\126\10\6\1\127"+
    "\4\6\1\51\1\130\2\53\1\0\1\6\1\56\1\0"+
    "\1\56\2\6\1\7\1\56\4\0\1\131\3\6\1\132"+
    "\1\6\1\133\1\6\1\134\1\135\3\6\1\136\3\6"+
    "\1\137\1\140\1\141\1\142\1\6\1\130\1\0\1\53"+
    "\1\0\1\53\1\56\1\0\1\56\1\143\1\6\1\56"+
    "\2\0\2\6\1\144\1\145\2\6\1\146\1\147\1\6"+
    "\1\150\2\6\1\51\1\53\1\0\1\53\1\56\1\151"+
    "\1\152\6\6\1\53\1\0\1\53\1\153\1\154\2\6"+
    "\1\155\1\156\2\53\1\157\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u0249"+
    "\0\u0208\0\u0249\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514"+
    "\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c"+
    "\0\u075d\0\u079e\0\u07df\0\202\0\202\0\202\0\202\0\202"+
    "\0\202\0\u0820\0\202\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965"+
    "\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\202\0\u0b2c"+
    "\0\u0b6d\0\u0bae\0\202\0\u0bef\0\202\0\202\0\u0249\0\u0c30"+
    "\0\u0249\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\202\0\202\0\u0d75"+
    "\0\202\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\202\0\202"+
    "\0\202\0\u0efb\0\u0f3c\0\202\0\u0f7d\0\u0fbe\0\u0451\0\u0fff"+
    "\0\202\0\u0492\0\202\0\u1040\0\u1081\0\u10c2\0\u1103\0\202"+
    "\0\202\0\u1144\0\u0249\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289"+
    "\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\202\0\u1658"+
    "\0\202\0\202\0\202\0\202\0\202\0\u1699\0\202\0\u16da"+
    "\0\202\0\202\0\u171b\0\202\0\202\0\202\0\202\0\u175c"+
    "\0\202\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\202"+
    "\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea"+
    "\0\202\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u0451\0\u1c2f\0\u1c70"+
    "\0\u1cb1\0\u0249\0\u1cf2\0\u1d33\0\u1d74\0\u0249\0\u1db5\0\u1df6"+
    "\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe"+
    "\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206"+
    "\0\202\0\202\0\202\0\202\0\202\0\u2247\0\u2288\0\u22c9"+
    "\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1"+
    "\0\u0249\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698"+
    "\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f\0\u0249"+
    "\0\u0249\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u0249\0\u29a4\0\u29e5"+
    "\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u0249\0\u2bac"+
    "\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4"+
    "\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc"+
    "\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u0249\0\u3101\0\u3142\0\u3183"+
    "\0\u0249\0\u31c4\0\u0249\0\u3205\0\u0249\0\u0249\0\u3246\0\u3287"+
    "\0\u32c8\0\u0249\0\u3309\0\u334a\0\u338b\0\u0249\0\u0249\0\u0249"+
    "\0\u0249\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552"+
    "\0\u3593\0\u35d4\0\u0249\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719"+
    "\0\u375a\0\u0249\0\u0249\0\u379b\0\u37dc\0\u0249\0\u0249\0\u381d"+
    "\0\u0249\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4"+
    "\0\u0249\0\u0249\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a"+
    "\0\u3bab\0\u3bec\0\u3c2d\0\u0249\0\u0249\0\u3c6e\0\u3caf\0\u0249"+
    "\0\u0249\0\u3cf0\0\u3d31\0\u0249\0\u0249";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\2\4\1\7\1\10\1\11"+
    "\2\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\22"+
    "\1\11\1\31\1\22\1\32\1\33\1\34\1\35\1\12"+
    "\1\36\1\37\1\40\1\12\1\41\1\42\3\12\1\43"+
    "\1\12\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\6\0\1\70\24\0"+
    "\1\71\147\0\1\4\2\0\2\4\76\0\1\72\163\0"+
    "\1\73\20\0\1\74\24\0\1\75\32\0\1\76\21\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\1\12\1\77"+
    "\2\12\1\0\1\100\6\12\1\101\1\102\10\12\33\0"+
    "\5\11\1\0\2\11\1\0\3\11\4\0\4\11\1\0"+
    "\21\11\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\4\12\1\0\21\12\36\0\1\103\1\104\1\105\3\0"+
    "\2\106\1\107\5\0\2\107\2\0\1\107\7\0\1\107"+
    "\50\0\1\110\51\0\1\111\21\0\4\12\1\112\1\0"+
    "\2\12\1\113\3\12\4\0\4\12\1\0\5\12\1\114"+
    "\7\12\1\115\3\12\12\0\1\113\20\0\4\11\1\116"+
    "\1\0\2\11\1\113\3\11\4\0\4\11\1\0\21\11"+
    "\12\0\1\113\30\0\1\117\46\0\1\120\2\0\1\121"+
    "\7\0\23\122\1\0\1\123\54\122\23\0\6\124\1\125"+
    "\1\126\3\0\2\124\4\0\1\124\34\0\24\127\1\130"+
    "\1\131\53\127\26\132\1\133\52\132\7\0\5\12\1\0"+
    "\2\12\1\0\3\12\4\0\4\12\1\0\2\12\1\134"+
    "\16\12\33\0\1\135\4\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\136\1\12\1\0\1\12\1\137\17\12"+
    "\57\0\1\140\32\0\1\141\21\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\1\142\1\143\1\144\1\12\1\0"+
    "\21\12\33\0\5\12\1\0\1\145\1\12\1\0\3\12"+
    "\4\0\4\12\1\0\21\12\33\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\4\12\1\0\2\12\1\146\13\12"+
    "\1\147\2\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\1\12\1\150\3\12\1\151\1\152"+
    "\12\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\1\153\3\12\1\0\7\12\1\154\4\12\1\155\4\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\2\12"+
    "\1\156\1\12\1\0\6\12\1\157\10\12\1\160\1\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\4\12"+
    "\1\0\1\12\1\161\17\12\33\0\1\162\4\12\1\0"+
    "\2\12\1\0\3\12\4\0\4\12\1\0\21\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\4\12\1\0"+
    "\1\12\1\163\4\12\1\164\12\12\33\0\5\12\1\0"+
    "\2\12\1\0\3\12\4\0\4\12\1\0\16\12\1\165"+
    "\2\12\110\0\1\166\30\0\1\167\152\0\1\170\100\0"+
    "\1\171\1\172\77\0\1\173\100\0\1\174\100\0\1\175"+
    "\3\0\1\176\74\0\1\177\4\0\1\200\73\0\1\201"+
    "\100\0\1\202\100\0\1\203\100\0\1\204\45\0\1\205"+
    "\53\0\1\206\72\0\4\72\1\207\1\210\73\72\4\74"+
    "\1\211\1\212\73\74\7\0\5\12\1\0\2\12\1\0"+
    "\2\12\1\213\4\0\4\12\1\0\21\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\3\12"+
    "\1\214\15\12\37\0\1\215\77\0\1\103\1\216\1\105"+
    "\3\0\2\106\1\107\5\0\2\107\2\0\1\107\7\0"+
    "\1\107\47\0\1\217\101\0\1\220\73\0\3\12\1\221"+
    "\1\222\1\0\2\12\1\0\3\12\4\0\4\12\1\0"+
    "\21\12\37\0\1\223\74\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\4\12\1\0\7\12\1\224\11\12\33\0"+
    "\1\225\4\12\1\0\2\12\1\0\3\12\4\0\4\12"+
    "\1\0\3\12\1\226\15\12\33\0\3\11\1\227\1\230"+
    "\1\0\2\11\1\0\3\11\4\0\4\11\1\0\21\11"+
    "\47\0\1\231\100\0\6\122\1\232\1\233\3\0\2\122"+
    "\4\0\1\122\44\0\1\234\2\0\1\234\2\0\1\234"+
    "\2\0\1\234\10\0\1\234\56\0\1\235\2\0\1\235"+
    "\2\0\1\235\2\0\1\235\10\0\1\235\46\0\24\127"+
    "\1\130\1\236\53\127\7\0\5\12\1\0\1\237\1\12"+
    "\1\0\3\12\4\0\4\12\1\0\21\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\10\12"+
    "\1\240\10\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\10\12\1\241\10\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\2\12"+
    "\1\242\16\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\11\12\1\243\7\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\3\12"+
    "\1\244\15\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\3\12\1\245\15\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\20\12"+
    "\1\246\33\0\1\247\4\12\1\0\1\250\1\12\1\0"+
    "\3\12\4\0\4\12\1\0\2\12\1\251\16\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\4\12\1\0"+
    "\10\12\1\252\10\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\4\12\1\0\6\12\1\253\12\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\4\12\1\0"+
    "\3\12\1\254\3\12\1\255\11\12\33\0\5\12\1\0"+
    "\2\12\1\0\3\12\4\0\4\12\1\0\7\12\1\256"+
    "\11\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\4\12\1\0\7\12\1\257\11\12\33\0\5\12\1\0"+
    "\2\12\1\0\3\12\4\0\4\12\1\0\6\12\1\260"+
    "\12\12\33\0\5\12\1\0\2\12\1\0\2\12\1\261"+
    "\4\0\4\12\1\0\21\12\33\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\4\12\1\0\3\12\1\262\15\12"+
    "\33\0\1\263\4\12\1\0\2\12\1\0\3\12\4\0"+
    "\4\12\1\0\21\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\4\12\1\0\10\12\1\264\10\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\4\12\1\0"+
    "\13\12\1\265\5\12\33\0\1\266\4\12\1\0\2\12"+
    "\1\0\3\12\4\0\4\12\1\0\21\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\5\12"+
    "\1\267\13\12\33\0\1\270\4\12\1\0\2\12\1\0"+
    "\3\12\4\0\4\12\1\0\21\12\40\0\1\271\152\0"+
    "\1\272\100\0\1\273\100\0\1\274\103\0\1\275\13\0"+
    "\1\207\100\0\1\211\103\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\4\12\1\0\1\12\1\276\17\12\33\0"+
    "\5\12\1\0\1\277\1\12\1\0\3\12\4\0\4\12"+
    "\1\0\21\12\37\0\1\300\77\0\1\301\1\302\1\105"+
    "\3\0\2\106\1\107\5\0\2\107\2\0\1\107\7\0"+
    "\1\107\47\0\1\303\1\0\2\304\1\0\3\107\5\0"+
    "\2\107\2\0\1\107\7\0\1\107\43\0\4\12\1\305"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\21\12"+
    "\33\0\3\12\1\221\1\306\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\21\12\36\0\1\307\1\310\74\0"+
    "\5\12\1\0\1\311\1\12\1\0\3\12\4\0\4\12"+
    "\1\0\21\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\7\12\1\312\11\12\33\0\5\12"+
    "\1\0\1\313\1\12\1\0\3\12\4\0\4\12\1\0"+
    "\21\12\33\0\4\11\1\314\1\0\2\11\1\0\3\11"+
    "\4\0\4\11\1\0\21\11\33\0\3\11\1\227\1\315"+
    "\1\0\2\11\1\0\3\11\4\0\4\11\1\0\21\11"+
    "\34\0\1\316\2\0\1\316\2\0\1\316\2\0\1\316"+
    "\10\0\1\316\56\0\1\317\2\0\1\317\2\0\1\317"+
    "\2\0\1\317\10\0\1\317\56\0\1\320\2\0\1\320"+
    "\2\0\1\320\2\0\1\320\10\0\1\320\56\0\1\321"+
    "\2\0\1\321\2\0\1\321\2\0\1\321\10\0\1\321"+
    "\55\0\5\12\1\0\2\12\1\0\3\12\4\0\4\12"+
    "\1\0\6\12\1\322\12\12\33\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\4\12\1\0\6\12\1\323\12\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\4\12"+
    "\1\0\4\12\1\324\14\12\33\0\5\12\1\0\1\325"+
    "\1\12\1\0\3\12\4\0\4\12\1\0\21\12\33\0"+
    "\5\12\1\0\1\326\1\12\1\0\3\12\4\0\4\12"+
    "\1\0\21\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\2\12\1\327\1\12\1\0\21\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\7\12"+
    "\1\330\11\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\10\12\1\331\10\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\1\12"+
    "\1\332\17\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\3\12\1\333\15\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\7\12"+
    "\1\334\11\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\4\12\1\335\14\12\33\0\5\12"+
    "\1\0\1\336\1\12\1\0\3\12\4\0\4\12\1\0"+
    "\21\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\4\12\1\0\3\12\1\337\15\12\33\0\1\340\4\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\21\12"+
    "\33\0\5\12\1\0\2\12\1\0\2\12\1\341\4\0"+
    "\4\12\1\0\21\12\33\0\5\12\1\0\1\342\1\12"+
    "\1\0\3\12\4\0\4\12\1\0\21\12\33\0\1\343"+
    "\4\12\1\0\2\12\1\0\3\12\4\0\4\12\1\0"+
    "\21\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\4\12\1\0\3\12\1\344\15\12\33\0\5\12\1\0"+
    "\1\345\1\12\1\0\3\12\4\0\4\12\1\0\21\12"+
    "\33\0\5\12\1\0\1\346\1\12\1\0\3\12\4\0"+
    "\4\12\1\0\21\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\4\12\1\0\14\12\1\347\4\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\2\12\1\350"+
    "\1\12\1\0\21\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\4\12\1\0\5\12\1\351\13\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\4\12\1\0"+
    "\2\12\1\352\16\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\4\12\1\0\2\12\1\353\16\12\37\0"+
    "\1\354\100\0\1\355\100\0\1\302\1\105\3\0\2\106"+
    "\1\107\5\0\2\107\2\0\1\107\7\0\1\107\47\0"+
    "\1\356\1\0\2\304\1\0\3\107\5\0\2\107\2\0"+
    "\1\107\7\0\1\107\47\0\1\357\3\0\1\360\47\0"+
    "\1\360\20\0\4\12\1\361\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\21\12\33\0\3\12\1\221\1\362"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\21\12"+
    "\37\0\1\363\77\0\1\307\1\364\74\0\5\12\1\0"+
    "\2\12\1\0\3\12\4\0\4\12\1\0\3\12\1\365"+
    "\15\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\4\12\1\0\10\12\1\366\10\12\33\0\4\11\1\367"+
    "\1\0\2\11\1\0\3\11\4\0\4\11\1\0\21\11"+
    "\33\0\3\11\1\227\1\370\1\0\2\11\1\0\3\11"+
    "\4\0\4\11\1\0\21\11\34\0\1\371\2\0\1\371"+
    "\2\0\1\371\2\0\1\371\10\0\1\371\56\0\1\372"+
    "\2\0\1\372\2\0\1\372\2\0\1\372\10\0\1\372"+
    "\56\0\1\373\2\0\1\373\2\0\1\373\2\0\1\373"+
    "\10\0\1\373\56\0\1\374\2\0\1\374\2\0\1\374"+
    "\2\0\1\374\10\0\1\374\55\0\5\12\1\0\2\12"+
    "\1\0\1\375\2\12\4\0\4\12\1\0\21\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\4\12\1\0"+
    "\5\12\1\376\13\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\4\12\1\0\3\12\1\377\15\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\4\12\1\0"+
    "\4\12\1\u0100\14\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\4\12\1\0\2\12\1\u0101\16\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\4\12\1\0"+
    "\2\12\1\u0102\16\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\4\12\1\0\17\12\1\u0103\1\12\33\0"+
    "\1\u0104\4\12\1\0\2\12\1\0\3\12\4\0\4\12"+
    "\1\0\21\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\7\12\1\u0105\11\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\16\12"+
    "\1\u0106\2\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\2\12\1\u0107\16\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\12\12"+
    "\1\u0108\6\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\3\12\1\u0109\15\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\2\12"+
    "\1\u010a\16\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\7\12\1\u010b\11\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\4\12"+
    "\1\u010c\14\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\1\u010d\20\12\33\0\5\12\1\0"+
    "\2\12\1\0\3\12\4\0\4\12\1\0\10\12\1\u010e"+
    "\10\12\33\0\5\12\1\0\1\u010f\1\12\1\0\3\12"+
    "\4\0\4\12\1\0\21\12\33\0\5\12\1\0\1\u0110"+
    "\1\12\1\0\3\12\4\0\4\12\1\0\21\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\4\12\1\0"+
    "\3\12\1\u0111\15\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\1\12\1\u0112\2\12\1\0\21\12\36\0"+
    "\1\103\1\0\1\105\3\0\2\106\1\107\5\0\2\107"+
    "\2\0\1\107\7\0\1\107\47\0\1\u0113\77\0\1\u0114"+
    "\1\u0115\1\0\2\304\1\0\3\107\5\0\2\107\2\0"+
    "\1\107\7\0\1\107\46\0\1\u0116\1\u0117\100\0\1\357"+
    "\74\0\4\12\1\u0118\1\0\2\12\1\0\3\12\4\0"+
    "\4\12\1\0\21\12\33\0\4\12\1\362\1\0\2\12"+
    "\1\0\3\12\4\0\4\12\1\0\21\12\37\0\1\u0119"+
    "\77\0\1\307\1\u011a\74\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\4\12\1\0\7\12\1\u011b\11\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\4\12\1\0"+
    "\14\12\1\u011c\4\12\33\0\4\11\1\u011d\1\0\2\11"+
    "\1\0\3\11\4\0\4\11\1\0\21\11\33\0\4\11"+
    "\1\370\1\0\2\11\1\0\3\11\4\0\4\11\1\0"+
    "\21\11\34\0\1\u011e\2\0\1\u011e\2\0\1\u011e\2\0"+
    "\1\u011e\10\0\1\u011e\56\0\1\u011f\2\0\1\u011f\2\0"+
    "\1\u011f\2\0\1\u011f\10\0\1\u011f\56\0\1\124\2\0"+
    "\1\124\2\0\1\124\2\0\1\124\10\0\1\124\56\0"+
    "\1\125\2\0\1\125\2\0\1\125\2\0\1\125\10\0"+
    "\1\125\55\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\4\12\1\0\5\12\1\u0120\13\12\33\0\1\u0121\4\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\21\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\4\12"+
    "\1\0\3\12\1\u0122\15\12\33\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\4\12\1\0\10\12\1\u0123\10\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\4\12"+
    "\1\0\10\12\1\u0124\10\12\33\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\4\12\1\0\6\12\1\u0125\12\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\4\12"+
    "\1\0\10\12\1\u0126\10\12\33\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\4\12\1\0\7\12\1\u0127\11\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\1\12"+
    "\1\u0128\2\12\1\0\21\12\33\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\4\12\1\0\16\12\1\u0129\2\12"+
    "\33\0\5\12\1\0\2\12\1\0\2\12\1\u012a\4\0"+
    "\4\12\1\0\21\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\4\12\1\0\6\12\1\u012b\12\12\37\0"+
    "\1\u012c\100\0\1\u012d\100\0\1\u0115\1\0\2\304\1\0"+
    "\3\107\5\0\2\107\2\0\1\107\7\0\1\107\47\0"+
    "\1\u012e\77\0\1\u0116\1\u012f\74\0\3\12\1\221\1\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\21\12"+
    "\37\0\1\u0130\100\0\1\u011a\74\0\5\12\1\0\2\12"+
    "\1\0\3\12\4\0\4\12\1\0\7\12\1\u0131\11\12"+
    "\33\0\3\11\1\227\1\11\1\0\2\11\1\0\3\11"+
    "\4\0\4\11\1\0\21\11\34\0\1\122\2\0\1\122"+
    "\2\0\1\122\2\0\1\122\10\0\1\122\56\0\1\232"+
    "\2\0\1\232\2\0\1\232\2\0\1\232\10\0\1\232"+
    "\55\0\5\12\1\0\2\12\1\0\3\12\4\0\4\12"+
    "\1\0\20\12\1\u0132\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\4\12\1\0\1\12\1\u0133\17\12\33\0"+
    "\5\12\1\0\2\12\1\0\3\12\4\0\2\12\1\u0134"+
    "\1\12\1\0\21\12\33\0\5\12\1\0\2\12\1\0"+
    "\3\12\4\0\4\12\1\0\4\12\1\u0135\14\12\33\0"+
    "\1\u0136\4\12\1\0\2\12\1\0\3\12\4\0\4\12"+
    "\1\0\21\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\3\12\1\u0137\15\12\33\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\4\12"+
    "\1\u0138\14\12\36\0\1\301\1\0\1\105\3\0\2\106"+
    "\1\107\5\0\2\107\2\0\1\107\7\0\1\107\47\0"+
    "\1\u0139\1\0\2\304\1\0\3\107\5\0\2\107\2\0"+
    "\1\107\7\0\1\107\47\0\1\u013a\77\0\1\u0116\1\u013b"+
    "\77\0\1\307\75\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\10\12\1\u013c\10\12\33\0\5\12"+
    "\1\0\1\u013d\1\12\1\0\3\12\4\0\4\12\1\0"+
    "\21\12\33\0\5\12\1\0\2\12\1\0\3\12\4\0"+
    "\4\12\1\0\3\12\1\u013e\15\12\33\0\5\12\1\0"+
    "\1\u013f\1\12\1\0\3\12\4\0\4\12\1\0\21\12"+
    "\33\0\5\12\1\0\2\12\1\0\3\12\4\0\4\12"+
    "\1\0\20\12\1\u0140\33\0\5\12\1\0\1\u0141\1\12"+
    "\1\0\3\12\4\0\4\12\1\0\21\12\37\0\1\u0142"+
    "\1\0\2\304\1\0\3\107\5\0\2\107\2\0\1\107"+
    "\7\0\1\107\47\0\1\u0143\100\0\1\u013b\74\0\5\12"+
    "\1\0\2\12\1\0\3\12\4\0\4\12\1\0\7\12"+
    "\1\u0144\11\12\33\0\5\12\1\0\2\12\1\0\3\12"+
    "\4\0\4\12\1\0\7\12\1\u0145\11\12\36\0\1\u0114"+
    "\2\0\2\304\1\0\3\107\5\0\2\107\2\0\1\107"+
    "\7\0\1\107\46\0\1\u0116\66\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15730];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\40\1\6\11\1\1\1\11\13\1\1\11"+
    "\2\0\1\1\1\11\1\1\2\11\4\1\1\0\1\1"+
    "\1\0\2\11\1\1\1\11\1\1\1\0\3\1\3\11"+
    "\2\0\1\11\4\0\1\11\1\0\1\11\4\1\2\11"+
    "\25\1\1\11\1\1\5\11\1\1\1\11\1\1\2\11"+
    "\1\1\4\11\1\1\1\11\3\1\1\0\2\1\1\11"+
    "\10\1\1\11\4\0\33\1\5\11\2\1\2\0\2\1"+
    "\1\0\2\1\1\0\6\1\4\0\36\1\1\0\2\1"+
    "\1\0\5\1\4\0\27\1\1\0\1\1\1\0\2\1"+
    "\1\0\4\1\2\0\16\1\1\0\13\1\1\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int commentDepth = 0;

    public void goTo(int offset) {
        zzCurrentPos = zzMarkedPos = zzStartRead = offset;
        zzPushbackPos = 0;
        zzAtEOF = offset < zzEndRead;
    }


  public _CeylonLexerM2(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _CeylonLexerM2(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2644) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51:
          { return CeylonTokenTypes.STRING_LITERAL;
          }
        case 113: break;
        case 72:
          { if (--commentDepth == 0) {
            yybegin(YYINITIAL);
            return CeylonTokenTypes.MULTI_LINE_COMMENT;
        }
          }
        case 114: break;
        case 34:
          { return CeylonTokenTypes.NOT_EQUAL_OPERATOR;
          }
        case 115: break;
        case 25:
          { return CeylonTokenTypes.MODULO_OPERATOR;
          }
        case 116: break;
        case 86:
          { return CeylonTokenTypes.CASE_KEYWORD;
          }
        case 117: break;
        case 65:
          { return CeylonTokenTypes.UNION_ASSIGN_OPERATOR;
          }
        case 118: break;
        case 82:
          { return CeylonTokenTypes.COMPARE_OPERATOR;
          }
        case 119: break;
        case 63:
          { return CeylonTokenTypes.INTERSECTION_ASSIGN_OPERATOR;
          }
        case 120: break;
        case 9:
          { return CeylonTokenTypes.MEMBER_OPERATOR;
          }
        case 121: break;
        case 97:
          { return CeylonTokenTypes.WHILE_KEYWORD;
          }
        case 122: break;
        case 32:
          { return CeylonTokenTypes.AMPERSAND_OPERATOR;
          }
        case 123: break;
        case 52:
          { return CeylonTokenTypes.QUOTED_LITERAL;
          }
        case 124: break;
        case 59:
          { return CeylonTokenTypes.ADD_ASSIGN_OPERATOR;
          }
        case 125: break;
        case 44:
          { return CeylonTokenTypes.RANGE_OPERATOR;
          }
        case 126: break;
        case 20:
          { return CeylonTokenTypes.LEFT_BRACKET_OPERATOR;
          }
        case 127: break;
        case 84:
          { return CeylonTokenTypes.THIS_KEYWORD;
          }
        case 128: break;
        case 68:
          { return CeylonTokenTypes.XOR_ASSIGN_OPERATOR;
          }
        case 129: break;
        case 61:
          { return CeylonTokenTypes.MODULO_ASSIGN_OPERATOR;
          }
        case 130: break;
        case 49:
          { return CeylonTokenTypes.ENTRY_OPERATOR;
          }
        case 131: break;
        case 39:
          { return CeylonTokenTypes.IS_KEYWORD;
          }
        case 132: break;
        case 74:
          { return CeylonTokenTypes.CHARACTER_LITERAL;
          }
        case 133: break;
        case 109:
          { return CeylonTokenTypes.NONEMPTY_KEYWORD;
          }
        case 134: break;
        case 7:
          { return CeylonTokenTypes.UPPERCASE_IDENTIFIER;
          }
        case 135: break;
        case 38:
          { return CeylonTokenTypes.IF_KEYWORD;
          }
        case 136: break;
        case 107:
          { return CeylonTokenTypes.FUNCTION_KEYWORD;
          }
        case 137: break;
        case 62:
          { return CeylonTokenTypes.GREATER_THAN_OR_EQUAL_TO_OPERATOR;
          }
        case 138: break;
        case 30:
          { return CeylonTokenTypes.XOR_OPERATOR;
          }
        case 139: break;
        case 112:
          { return CeylonTokenTypes.SATISFIES_KEYWORD;
          }
        case 140: break;
        case 27:
          { return CeylonTokenTypes.INTERSECTION_OPERATOR;
          }
        case 141: break;
        case 47:
          { return CeylonTokenTypes.DECREMENT_OPERATOR;
          }
        case 142: break;
        case 3:
          { return CeylonTokenTypes.HASH_OPERATOR;
          }
        case 143: break;
        case 16:
          { return CeylonTokenTypes.LEFT_BRACE_OPERATOR;
          }
        case 144: break;
        case 8:
          { return CeylonTokenTypes.DIGIT;
          }
        case 145: break;
        case 33:
          { return CeylonTokenTypes.SHELL_COMMENT;
          }
        case 146: break;
        case 103:
          { return CeylonTokenTypes.ADAPTS_KEYWORD;
          }
        case 147: break;
        case 60:
          { return CeylonTokenTypes.INCREMENT_OPERATOR;
          }
        case 148: break;
        case 29:
          { return CeylonTokenTypes.COMPLEMENT_OPERATOR;
          }
        case 149: break;
        case 31:
          { return CeylonTokenTypes.LESS_THAN_OPERATOR;
          }
        case 150: break;
        case 26:
          { return CeylonTokenTypes.GREATER_THAN_OPERATOR;
          }
        case 151: break;
        case 66:
          { return CeylonTokenTypes.OR_OPERATOR;
          }
        case 152: break;
        case 73:
          { return CeylonTokenTypes.ELLIPSES_OPERATOR;
          }
        case 153: break;
        case 80:
          { return CeylonTokenTypes.AND_ASSIGN_OPERATOR;
          }
        case 154: break;
        case 14:
          { return CeylonTokenTypes.COMMA_OPERATOR;
          }
        case 155: break;
        case 22:
          { return CeylonTokenTypes.DEFAULT_OPERATOR;
          }
        case 156: break;
        case 75:
          { return CeylonTokenTypes.FOR_KEYWORD;
          }
        case 157: break;
        case 105:
          { return CeylonTokenTypes.EXTENDS_KEYWORD;
          }
        case 158: break;
        case 101:
          { return CeylonTokenTypes.RETURN_KEYWORD;
          }
        case 159: break;
        case 83:
          { return CeylonTokenTypes.ELSE_KEYWORD;
          }
        case 160: break;
        case 37:
          { return CeylonTokenTypes.DIVIDE_ASSIGN_OPERATOR;
          }
        case 161: break;
        case 93:
          { return CeylonTokenTypes.CATCH_KEYWORD;
          }
        case 162: break;
        case 43:
          { return CeylonTokenTypes.FLOAT_LITERAL;
          }
        case 163: break;
        case 40:
          { return CeylonTokenTypes.IN_KEYWORD;
          }
        case 164: break;
        case 56:
          { return CeylonTokenTypes.ARRAY_OPERATOR;
          }
        case 165: break;
        case 78:
          { return CeylonTokenTypes.SPREAD_OPERATOR;
          }
        case 166: break;
        case 91:
          { return CeylonTokenTypes.THROW_KEYWORD;
          }
        case 167: break;
        case 95:
          { return CeylonTokenTypes.GIVEN_KEYWORD;
          }
        case 168: break;
        case 35:
          { return CeylonTokenTypes.LINE_COMMENT;
          }
        case 169: break;
        case 21:
          { return CeylonTokenTypes.RIGHT_BRACKET_OPERATOR;
          }
        case 170: break;
        case 5:
          { return CeylonTokenTypes.DIVIDE_OPERATOR;
          }
        case 171: break;
        case 46:
          { return CeylonTokenTypes.EXPONENT;
          }
        case 172: break;
        case 18:
          { return CeylonTokenTypes.LEFT_PARENTHESIS_OPERATOR;
          }
        case 173: break;
        case 79:
          { return CeylonTokenTypes.IDENTICAL_OPERATOR;
          }
        case 174: break;
        case 98:
          { return CeylonTokenTypes.IMPORT_KEYWORD;
          }
        case 175: break;
        case 55:
          { return CeylonTokenTypes.OF_KEYWORD;
          }
        case 176: break;
        case 17:
          { return CeylonTokenTypes.RIGHT_BRACE_OPERATOR;
          }
        case 177: break;
        case 41:
          { return CeylonTokenTypes.DIGITS;
          }
        case 178: break;
        case 10:
          { return CeylonTokenTypes.SUBTRACT_OPERATOR;
          }
        case 179: break;
        case 42:
          { return CeylonTokenTypes.INTEGER_LITERAL;
          }
        case 180: break;
        case 81:
          { return CeylonTokenTypes.OR_ASSIGN_OPERATOR;
          }
        case 181: break;
        case 92:
          { return CeylonTokenTypes.CLASS_KEYWORD;
          }
        case 182: break;
        case 96:
          { return CeylonTokenTypes.VALUE_KEYWORD;
          }
        case 183: break;
        case 77:
          { return CeylonTokenTypes.TRY_KEYWORD;
          }
        case 184: break;
        case 24:
          { return CeylonTokenTypes.ADD_OPERATOR;
          }
        case 185: break;
        case 54:
          { return CeylonTokenTypes.MULTIPLY_ASSIGN_OPERATOR;
          }
        case 186: break;
        case 90:
          { return CeylonTokenTypes.OUTER_KEYWORD;
          }
        case 187: break;
        case 2:
          { return CeylonTokenTypes.WHITE_SPACE;
          }
        case 188: break;
        case 45:
          { return CeylonTokenTypes.APPLY_OPERATOR;
          }
        case 189: break;
        case 67:
          { return CeylonTokenTypes.COMPLEMENT_ASSIGN_OPERATOR;
          }
        case 190: break;
        case 28:
          { return CeylonTokenTypes.UNION_OPERATOR;
          }
        case 191: break;
        case 102:
          { return CeylonTokenTypes.ASSIGN_KEYWORD;
          }
        case 192: break;
        case 88:
          { return CeylonTokenTypes.FRACTIONAL_DIGITS;
          }
        case 193: break;
        case 1:
          { return CeylonTokenTypes.BAD_CHARACTER;
          }
        case 194: break;
        case 69:
          { return CeylonTokenTypes.LESS_THAN_OR_EQUAL_TO_OPERATOR;
          }
        case 195: break;
        case 15:
          { return CeylonTokenTypes.SEMICOLON_OPERATOR;
          }
        case 196: break;
        case 110:
          { return CeylonTokenTypes.INTERFACE_KEYWORD;
          }
        case 197: break;
        case 100:
          { return CeylonTokenTypes.OBJECT_KEYWORD;
          }
        case 198: break;
        case 87:
          { return CeylonTokenTypes.VOID_KEYWORD;
          }
        case 199: break;
        case 111:
          { return CeylonTokenTypes.ABSTRACTS_KEYWORD;
          }
        case 200: break;
        case 89:
          { return CeylonTokenTypes.BREAK_KEYWORD;
          }
        case 201: break;
        case 48:
          { return CeylonTokenTypes.SUBTRACT_ASSIGN_OPERATOR;
          }
        case 202: break;
        case 11:
          { return CeylonTokenTypes.MAGNITUDE;
          }
        case 203: break;
        case 58:
          { return CeylonTokenTypes.EQUAL_OPERATOR;
          }
        case 204: break;
        case 71:
          { commentDepth++;
          }
        case 205: break;
        case 57:
          { return CeylonTokenTypes.SAFE_MEMBER_OPERATOR;
          }
        case 206: break;
        case 36:
          { yybegin(MULTI_LINE_COMMENT);
        commentDepth++;
          }
        case 207: break;
        case 104:
          { return CeylonTokenTypes.SWITCH_KEYWORD;
          }
        case 208: break;
        case 13:
          { return CeylonTokenTypes.MULTIPLY_OPERATOR;
          }
        case 209: break;
        case 4:
          { return CeylonTokenTypes.NOT_OPERATOR;
          }
        case 210: break;
        case 12:
          { return CeylonTokenTypes.FRACTIONAL_MAGNITUDE;
          }
        case 211: break;
        case 99:
          { return CeylonTokenTypes.EXISTS_KEYWORD;
          }
        case 212: break;
        case 76:
          { return CeylonTokenTypes.OUT_KEYWORD;
          }
        case 213: break;
        case 23:
          { return CeylonTokenTypes.SPECIFY_OPERATOR;
          }
        case 214: break;
        case 70:
          { return CeylonTokenTypes.ASSIGN_OPERATOR;
          }
        case 215: break;
        case 19:
          { return CeylonTokenTypes.RIGHT_PARENTHESIS_OPERATOR;
          }
        case 216: break;
        case 108:
          { return CeylonTokenTypes.CONTINUE_KEYWORD;
          }
        case 217: break;
        case 106:
          { return CeylonTokenTypes.FINALLY_KEYWORD;
          }
        case 218: break;
        case 94:
          { return CeylonTokenTypes.SUPER_KEYWORD;
          }
        case 219: break;
        case 64:
          { return CeylonTokenTypes.AND_OPERATOR;
          }
        case 220: break;
        case 50:
          { return CeylonTokenTypes.ESCAPE_SEQUENCE;
          }
        case 221: break;
        case 53:
          { return CeylonTokenTypes.POWER_OPERATOR;
          }
        case 222: break;
        case 6:
          { return CeylonTokenTypes.LOWERCASE_IDENTIFIER;
          }
        case 223: break;
        case 85:
          { return CeylonTokenTypes.THEN_KEYWORD;
          }
        case 224: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
